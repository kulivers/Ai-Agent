<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Agents.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.Agents.Agent">
            <summary>
            Base abstraction for all Semantic Kernel agents.  An agent instance
            may participate in one or more conversations, or <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            A conversation may include one or more agents.
            </summary>
            <remarks>
            In addition to identity and descriptive meta-data, an <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>
            must define its communication protocol, or <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Description">
            <summary>
            Gets the description of the agent (optional).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Id">
            <summary>
            Gets the identifier of the agent (optional).
            </summary>
            <value>
            The identifier of the agent. The default is a random GUID value, but that can be overridden.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Name">
            <summary>
            Gets the name of the agent (optional).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.LoggerFactory">
            <summary>
            A <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> for this <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Arguments">
            <summary>
            Gets the arguments for the agent instruction parameters (optional).
            </summary>
            <remarks>
            Also includes <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Instructions">
            <summary>
            Gets the instructions for the agent (optional).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Kernel">
            <summary>
            Gets the <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Kernel"/> containing services, plugins, and filters for use throughout the agent lifetime.
            </summary>
            <value>
            The <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Kernel"/> containing services, plugins, and filters for use throughout the agent lifetime. The default value is an empty Kernel, but that can be overridden.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.UseImmutableKernel">
            <summary>
            This option forces the agent to clone the original kernel instance during invocation if <c>true</c>. Default is <c>false</c>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.SemanticKernel.AIContextProvider"/> implementations that provide <see cref="T:Microsoft.Extensions.AI.AIFunction"/> instances require the
            kernel to be cloned during agent invocation, but cloning has the side affect of causing modifications to Kernel
            Data by plugins to be lost.  Cloning is therefore opt-in.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Template">
            <summary>
            Gets or sets a prompt template based on the agent instructions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeAsync(Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with no message assuming that all required instructions are already provided to the agent or on the thread.
            </summary>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeAsync(System.String,Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with the provided message and arguments.
            </summary>
            <param name="message">The message to pass to the agent.</param>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            <para>
            The provided message string will be treated as a user message.
            </para>
            <para>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeAsync(Microsoft.SemanticKernel.ChatMessageContent,Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with the provided message and arguments.
            </summary>
            <param name="message">The message to pass to the agent.</param>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeAsync(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with the provided message and arguments.
            </summary>
            <param name="messages">The messages to pass to the agent.</param>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeStreamingAsync(Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with no message assuming that all required instructions are already provided to the agent or on the thread.
            </summary>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeStreamingAsync(System.String,Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with the provided message and arguments.
            </summary>
            <param name="message">The message to pass to the agent.</param>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            <para>
            The provided message string will be treated as a user message.
            </para>
            <para>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeStreamingAsync(Microsoft.SemanticKernel.ChatMessageContent,Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with the provided message and arguments.
            </summary>
            <param name="message">The message to pass to the agent.</param>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.InvokeStreamingAsync(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <summary>
            Invoke the agent with the provided message and arguments.
            </summary>
            <param name="messages">The messages to pass to the agent.</param>
            <param name="thread">The conversation thread to continue with this invocation. If not provided, creates a new thread.</param>
            <param name="options">Optional parameters for agent invocation.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async list of response items that each contain a <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.</returns>
            <remarks>
            To continue this thread in the future, use an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> returned in one of the response items.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.Logger">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger"/> associated with this  <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Agent.ActiveLoggerFactory">
            <summary>
            Get the active logger factory, if defined; otherwise, provide the default.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.RenderInstructionsAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Formats the system instructions for the agent.
            </summary>
            <param name="kernel">The <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Kernel"/> containing services, plugins, and other state for use by the agent.</param>
            <param name="arguments">Optional arguments to pass to the agents's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The formatted system instructions for the agent.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.GetChannelKeys">
            <summary>
            Set of keys to establish channel affinity.  Minimum expected key-set:
            <example>
            yield return typeof(YourAgentChannel).FullName;
            </example>
            </summary>
            <remarks>
            Two specific agents of the same type may each require their own channel.  This is
            why the channel type alone is insufficient.
            For example, two OpenAI Assistant agents each targeting a different Azure OpenAI endpoint
            would require their own channel. In this case, the endpoint could be expressed as an additional key.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.CreateChannelAsync(System.Threading.CancellationToken)">
            <summary>
            Produce an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> appropriate for the agent type.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> appropriate for the agent type.</returns>
            <remarks>
            Every agent conversation, or <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>, will establish one or more <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/>
            objects according to the specific <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> type.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.RestoreChannelAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Produce an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> appropriate for the agent type based on the provided state.
            </summary>
            <param name="channelState">The channel state, as serialized</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> appropriate for the agent type.</returns>
            <remarks>
            Every agent conversation, or <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>, will establish one or more <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/>
            objects according to the specific <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> type.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.EnsureThreadExistsWithMessagesAsync``1(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.Agents.AgentThread,System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Ensures that the thread exists, is of the expected type, and is active, plus adds the provided message to the thread.
            </summary>
            <typeparam name="TThreadType">The expected type of the thead.</typeparam>
            <param name="messages">The messages to add to the thread once it is setup.</param>
            <param name="thread">The thread to create if it's null, validate it's type if not null, and start if it is not active.</param>
            <param name="constructThread">A callback to use to construct the thread if it's null.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async task that completes once all update are complete.</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException"></exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.NotifyThreadOfNewMessage(Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.ChatMessageContent,System.Threading.CancellationToken)">
            <summary>
            Notfiy the given thread that a new message is available.
            </summary>
            <remarks>
            <para>
            Note that while all agents should notify their threads of new messages,
            not all threads will necessarily take action. For some treads, this may be
            the only way that they would know that a new message is available to be added
            to their history.
            </para>
            <para>
            For other thread types, where history is managed by the service, the thread may
            not need to take any action.
            </para>
            <para>
            Where threads manage other memory components that need access to new messages,
            notifying the thread will be important, even if the thread itself does not
            require the message.
            </para>
            </remarks>
            <param name="thread">The thread to notify of the new message.</param>
            <param name="message">The message to pass to the thread.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async task that completes once the notification is complete.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Agent.FormatAdditionalInstructions(Microsoft.SemanticKernel.AIContext,Microsoft.SemanticKernel.Agents.AgentInvokeOptions)">
            <summary>
            Default formatting for additional instructions for the AI agent based on the provided context and invocation options.
            </summary>
            <param name="context">The context containing relevant information for the AI agent's operation.</param>
            <param name="options">Optional parameters that influence the invocation behavior. Can be <see langword="null"/>.</param>
            <returns>A formatted string representing the additional instructions for the AI agent.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentChannel">
            <summary>
            Defines the communication protocol for a particular <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> type.
            </summary>
            <remarks>
            An agent provides it own <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> via <see cref="M:Microsoft.SemanticKernel.Agents.Agent.CreateChannelAsync(System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentChannel.Logger">
            <summary>
            Gets or sets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> associated with the <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel.Serialize">
            <summary>
            Responsible for providing the serialized representation of the channel.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel.ReceiveAsync(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Receive the conversation messages.  Used when joining a conversation and also during each agent interaction.
            </summary>
            <param name="history">The chat history at the point the channel is created.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel.ResetAsync(System.Threading.CancellationToken)">
            <summary>
            Reset any persistent state associated with the channel.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <remarks>
            The channel won't be reused; rather, it will be discarded and a new one created.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel.InvokeAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <summary>
            Perform a discrete incremental interaction between a single <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Asynchronous enumeration of messages.</returns>
            <remarks>
            In the enumeration returned by this method, a message is considered visible if it is intended to be displayed to the user.
            Example of a non-visible message is function-content for functions that are automatically executed.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel.InvokeStreamingAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Perform a discrete incremental interaction between a single <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> with streaming results.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="messages">The receiver for the completed messages generated</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Asynchronous enumeration of streaming messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel.GetHistoryAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the message history specific to this channel.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Asynchronous enumeration of messages.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentChannel`1">
            <summary>
            Defines the communication protocol for a particular <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> type.
            </summary>
            <typeparam name="TAgent">The agent type for this channel.</typeparam>
            <remarks>
            An agent provides it own <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> via <see cref="M:Microsoft.SemanticKernel.Agents.Agent.CreateChannelAsync(System.Threading.CancellationToken)"/>.
            This class is a convenience upcast to an agent for <see cref="M:Microsoft.SemanticKernel.Agents.AgentChannel`1.InvokeAsync(`0,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel`1.InvokeAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Process a discrete incremental interaction between a single <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and a <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Asynchronous enumeration of messages.</returns>
            <remarks>
            In the enumeration returned by this method, a message is considered visible if it is intended to be displayed to the user.
            Example of a non-visible message is function-content for functions that are automatically executed.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel`1.InvokeAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel`1.InvokeStreamingAsync(`0,System.Collections.Generic.IList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Process a discrete incremental interaction between a single <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and a <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="messages">The receiver for the completed messages generated</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Asynchronous enumeration of messages.</returns>
            <remarks>
            In the enumeration returned by this method, a message is considered visible if it is intended to be displayed to the user.
            Example of a non-visible message is function-content for functions that are automatically executed.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChannel`1.InvokeStreamingAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentChat">
            <summary>
            Provides a point of interaction for one or more agents.
            </summary>
            <remarks>
            <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat" /> instances don't support concurrent invocation and
            will throw an exception if concurrent activity is attempted for any public method.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentChat.Agents">
            <summary>
            Gets the agents participating in the chat.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentChat.IsActive">
            <summary>
            Gets a value that indicates whether a chat operation is active. Activity is defined as
            any execution of a public method.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentChat.LoggerFactory">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> associated with the <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentChat.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> associated with this chat.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentChat.History">
            <summary>
            Gets the internal history to expose it to subclasses.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.InvokeAsync(System.Threading.CancellationToken)">
            <summary>
            Processes a series of interactions between the agents participating in this chat.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.InvokeStreamingAsync(System.Threading.CancellationToken)">
            <summary>
            Processes a series of interactions between the agents participating in this chat.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.GetChatMessagesAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves the chat history.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The message history.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.GetChatMessagesAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <summary>
            Retrieves the message history, either the primary history or
            an agent-specific version.
            </summary>
            <param name="agent">An optional agent, if requesting an agent history.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The message history.</returns>
            <remarks>
            <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat" /> instances don't support concurrent invocation and
            will throw exception if concurrent activity is attempted.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.AddChatMessage(Microsoft.SemanticKernel.ChatMessageContent)">
             <summary>
             Appends a message to the conversation. Adding a message while an agent
             is active is not allowed.
             </summary>
             <param name="message">A non-system message to append to the conversation.</param>
             <remarks>
             Adding a message to the conversation requires that any active <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> remains
             synchronized, so the message is broadcast to all channels.
            
             <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat" /> instances don't support concurrent invocation and
             will throw exception if concurrent activity is attempted.
             </remarks>
             <exception cref="T:Microsoft.SemanticKernel.KernelException">A system message is present, and no other action is taken.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.AddChatMessages(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent})">
             <summary>
             Appends messages to the conversation. Adding messages while an agent
             is active is not allowed.
             </summary>
             <param name="messages">A set of non-system messages to append to the conversation.</param>
             <remarks>
             Adding messages to the conversation requires that any active <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> remains
             synchronized, so the messages are broadcast to all channels.
            
             <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat" /> instances don't support concurrent invocation and
             will throw exception if concurrent activity is attempted.
             </remarks>
             <exception cref="T:Microsoft.SemanticKernel.KernelException">A system message is present, and no other action is taken.
             -or-
             The chat has current activity.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.InvokeAgentAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <summary>
            Processes a discrete incremental interaction between a single <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and a <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of messages.</returns>
            <remarks>
            <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat" /> instances don't support concurrent invocation and
            will throw exception if concurrent activity is attempted.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.InvokeStreamingAgentAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <summary>
            Processes a discrete incremental interaction between a single <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and a <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Asynchronous enumeration of messages.</returns>
            <remarks>
            <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat" /> instances don't support concurrent invocation and
            will throw exception if concurrent activity is attempted.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.ResetAsync(System.Threading.CancellationToken)">
            <summary>
            Resets the chat, clearing all history and persisted state.
            All agents will remain present.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.ClearActivitySignal">
            <summary>
            Clear activity signal to indicate that activity has ceased.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.SetActivityOrThrow">
            <summary>
            Checks to ensure the chat is not concurrently active and throws an exception if it is.
            If not, activity is signaled.
            </summary>
            <remarks>
            Rather than allowing concurrent invocation to result in undefined behavior or failure,
            it's preferred to fail fast to avoid side effects or state mutation.
            The activity signal is used to manage ability and visibility for taking actions based
            on conversation history.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentChatSerializer">
            <summary>
            Serializes and deserializes an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatSerializer.SerializeAsync``1(``0,System.IO.Stream,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Serializes the provided <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> to the target stream.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatSerializer.DeserializeAsync(System.IO.Stream,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.Agents.AgentChatSerializer"/> that's able to restore an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentChatSerializer.Participants">
            <summary>
            Gets the participants of the original <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> so that
            the caller can include them in the restored <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatSerializer.DeserializeAsync``1(``0)">
            <summary>
            Restores the <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> to the previously captured state.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentExtensions">
            <summary>
            Exposes a Semantic Kernel Agent Framework <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentExtensions.AsAIAgent(Microsoft.SemanticKernel.Agents.Agent,System.Func{Microsoft.SemanticKernel.Agents.AgentThread},System.Func{System.Text.Json.JsonElement,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.Agents.AgentThread},System.Func{Microsoft.SemanticKernel.Agents.AgentThread,System.Text.Json.JsonSerializerOptions,System.Text.Json.JsonElement})">
            <summary>
            Exposes a Semantic Kernel Agent Framework <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.
            </summary>
            <param name="semanticKernelAgent">The Semantic Kernel <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> to expose as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.</param>
            <param name="threadFactory">A factory method to create the required <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> type to use with the agent.</param>
            <param name="threadDeserializationFactory">A factory method to deserialize the required <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> type.</param>
            <param name="threadSerializer">A method to serialize the <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> type.</param>
            <returns>The Semantic Kernel Agent Framework <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> exposed as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentInvokeOptions">
            <summary>
            Optional parameters for agent invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentInvokeOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentInvokeOptions"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentInvokeOptions.#ctor(Microsoft.SemanticKernel.Agents.AgentInvokeOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentInvokeOptions"/> class by cloning the provided options.
            </summary>
            <param name="options">The options to clone.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInvokeOptions.KernelArguments">
            <summary>
            Gets or sets optional arguments to pass to the agent's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInvokeOptions.Kernel">
            <summary>
            Gets or sets the <see cref="P:Microsoft.SemanticKernel.Agents.AgentInvokeOptions.Kernel"/> containing services, plugins, and other state for use by the agent
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInvokeOptions.AdditionalInstructions">
            <summary>
            Gets or sets any instructions, in addition to those that were provided to the agent
            initially, that need to be added to the prompt for this invocation only.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInvokeOptions.OnIntermediateMessage">
            <summary>
            Gets or sets a function to be called when a complete new message is generated by the agent.
            </summary>
            <remarks>
            <para>
            This callback is particularly useful in cases where the caller wants to receive complete messages
            when invoking the agent with streaming.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentResponseItem`1">
            <summary>
            Container class that holds a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> or <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentResponseItem`1.#ctor(`0,Microsoft.SemanticKernel.Agents.AgentThread)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentResponseItem`1"/> class.
            </summary>
            <param name="message">The chat message content.</param>
            <param name="thread">The conversation thread associated with the response.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentResponseItem`1.Message">
            <summary>
            Gets the chat message content.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentResponseItem`1.Thread">
            <summary>
            Gets the conversation thread associated with the response.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentResponseItem`1.op_Implicit(Microsoft.SemanticKernel.Agents.AgentResponseItem{`0})~`0">
            <summary>
            Implicitly converts an <see cref="T:Microsoft.SemanticKernel.Agents.AgentResponseItem`1"/> to a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> or <see cref="T:Microsoft.SemanticKernel.StreamingChatMessageContent"/>.
            </summary>
            <param name="responseItem"></param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentThread">
            <summary>
            Base abstraction for all Semantic Kernel agent threads.
            A thread represents a specific conversation with an agent.
            </summary>
            <remarks>
            This class is used to manage the lifecycle of an agent thread.
            The thread can be not-start, started or ended.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentThread.Id">
            <summary>
            Gets the id of the current thread.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentThread.IsDeleted">
            <summary>
            Gets a value indicating whether the thread has been deleted.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentThread.AIContextProviders">
            <summary>
            Gets or sets the container for <see cref="T:Microsoft.SemanticKernel.AIContextProvider"/> objects that manages their lifecycle and interactions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.OnSuspendAsync(System.Threading.CancellationToken)">
            <summary>
            Called when the current conversion is temporarily suspended and any state should be saved.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async task.</returns>
            <remarks>
            In a service that hosts an agent, that is invoked via calls to the service, this might be at the end of each service call.
            In a client application, this might be when the user closes the chat window or the application.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.OnResumeAsync(System.Threading.CancellationToken)">
            <summary>
            Called when the current conversion is resumed and any state should be restored.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An async task.</returns>
            <remarks>
            In a service that hosts an agent, that is invoked via calls to the service, this might be at the start of each service call where a previous conversation is being continued.
            In a client application, this might be when the user re-opens the chat window to resume a conversation after having previously closed it.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the thread and returns the thread id.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the thread has been created.</returns>
            <exception cref="T:System.InvalidOperationException">The thread has been deleted.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the current thread.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the thread has been deleted.</returns>
            <exception cref="T:System.InvalidOperationException">The thread was never created.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.OnNewMessageAsync(Microsoft.SemanticKernel.ChatMessageContent,System.Threading.CancellationToken)">
            <summary>
            This method is called when a new message has been contributed to the chat by any participant.
            </summary>
            <remarks>
            Inheritors can use this method to update their context based on the new message.
            </remarks>
            <param name="newMessage">The new message.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the context has been updated.</returns>
            <exception cref="T:System.InvalidOperationException">The thread has been deleted.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.CreateInternalAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the thread and returns the thread id.
            Checks have already been completed in the <see cref="M:Microsoft.SemanticKernel.Agents.AgentThread.CreateAsync(System.Threading.CancellationToken)"/> method to ensure that the thread can be created.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The id of the thread that was created if one is available.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.DeleteInternalAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the current thread.
            Checks have already been completed in the <see cref="M:Microsoft.SemanticKernel.Agents.AgentThread.DeleteAsync(System.Threading.CancellationToken)"/> method to ensure that the thread can be deleted.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the thread has been deleted.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThread.OnNewMessageInternalAsync(Microsoft.SemanticKernel.ChatMessageContent,System.Threading.CancellationToken)">
            <summary>
            This method is called when a new message has been contributed to the chat by any participant.
            Checks have already been completed in the <see cref="M:Microsoft.SemanticKernel.Agents.AgentThread.OnNewMessageAsync(Microsoft.SemanticKernel.ChatMessageContent,System.Threading.CancellationToken)"/> method to ensure that the thread can be updated.
            </summary>
            <param name="newMessage">The new message.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the context has been updated.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentThreadOperationException">
            <summary>
            Defines an exception that's thrown when an operation on an <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> fails, such as creating or deleting the thread.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThreadOperationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentThreadOperationException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThreadOperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentThreadOperationException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentThreadOperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentThreadOperationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AggregatorMode">
            <summary>
            Defines the relationship between the internal aggregated chat and the chat
            with which <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> is participating.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.AggregatorMode.Flat">
            <summary>
            A flat embedding of the aggregated chat within another chat.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.AggregatorMode.Nested">
            <summary>
            A nested embedding the aggregated chat within another chat.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AggregatorAgent">
            <summary>
            Allows an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> to participate in another <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> as an <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
            <param name="chatProvider">A factory method that produces a new <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> instance.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgent.#ctor(System.Func{Microsoft.SemanticKernel.Agents.AgentChat})">
            <summary>
            Allows an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> to participate in another <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> as an <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
            <param name="chatProvider">A factory method that produces a new <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> instance.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AggregatorAgent.Mode">
            <summary>
            Gets the relationship between the internal aggregated chat and the chat
            with which <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> is participating.
            </summary>
            <value>
            The relationship between the internal aggregated chat and the chat
            with which <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> is participating. The default value is <see cref="F:Microsoft.SemanticKernel.Agents.AggregatorMode.Flat"/>.
            </value>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgent.InvokeAsync(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgent.InvokeStreamingAsync(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgent.GetChannelKeys">
            <inheritdoc/>
            <remarks>
            Different <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> instances will never share the same channel.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgent.CreateChannelAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgent.RestoreChannelAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AggregatorChannel">
            <summary>
            Adapt channel contract to underlying <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorChannel.#ctor(Microsoft.SemanticKernel.Agents.AgentChat)">
            <summary>
            Adapt channel contract to underlying <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorChannel.GetHistoryAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorChannel.InvokeAsync(Microsoft.SemanticKernel.Agents.AggregatorAgent,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorChannel.InvokeStreamingAsync(Microsoft.SemanticKernel.Agents.AggregatorAgent,System.Collections.Generic.IList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorChannel.ReceiveAsync(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorChannel.ResetAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent">
            <summary>
            Exposes a Semantic Kernel Agent Framework <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.#ctor(Microsoft.SemanticKernel.Agents.Agent,System.Func{Microsoft.SemanticKernel.Agents.AgentThread},System.Func{System.Text.Json.JsonElement,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.Agents.AgentThread},System.Func{Microsoft.SemanticKernel.Agents.AgentThread,System.Text.Json.JsonSerializerOptions,System.Text.Json.JsonElement})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent"/> class.
            </summary>
            <param name="semanticKernelAgent">The Semantic Kernel <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> to expose as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.</param>
            <param name="threadFactory">A factory method to create the required <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> type to use with the agent.</param>
            <param name="threadDeserializationFactory">A factory method to deserialize the required <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> type.</param>
            <param name="threadSerializer">A method to serialize the <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/> type.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.Id">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.Description">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.DeserializeThread(System.Text.Json.JsonElement,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.GetNewThread">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.RunAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Agents.AI.AgentThread,Microsoft.Agents.AI.AgentRunOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.RunStreamingAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Agents.AI.AgentThread,Microsoft.Agents.AI.AgentRunOptions,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgent.GetService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgentThread.InnerThread">
            <summary>
            Gets the underlying Semantic Kernel Agent Framework <see cref="T:Microsoft.SemanticKernel.Agents.AgentThread"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgentThread.Serialize(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.SemanticKernelAIAgentThread.GetService(System.Type,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentCreationOptions">
            <summary>
            Optional parameters for agent creation used when create an <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>
            using an instance of <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/>.
            <remarks>
            Implementors of <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/> can extend this class to provide
            agent specific creation options.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentCreationOptions.Kernel">
            <summary>
            Gets or sets the <see cref="P:Microsoft.SemanticKernel.Agents.AgentCreationOptions.Kernel"/>, a kernel instance to resolve services.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentCreationOptions.PromptTemplateFactory">
            <summary>
            Gets or sets the <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/>, a factory for prompt templates for one or more prompt template formats.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentDefinition">
            <summary>
            Defines an agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Version">
            <summary>
            Gets or sets the version of the agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Id">
            <summary>
            Gets or sets the unique identifier of the agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Type">
            <summary>
            Gets or sets the type of the  agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Name">
            <summary>
            Gets or sets the name of the  agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Description">
            <summary>
            Gets or sets the short description of the agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Instructions">
            <summary>
            Gets or sets the instructions for the agent to use.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Metadata">
            <summary>
            Gets or sets the metadata associated with the agent, including its authors and tags
            as specific metadata but can accept any optional metadata that can be handled by the provider.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Model">
            <summary>
            Gets or sets the model used by the agent, including the API, connection, and options.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Inputs">
            <summary>
            Gets or sets the collection of inputs used by the agent, including their type, default value, and description.
            </summary>
            <remarks>
            This is typically a set of inputs that will be used as parameters that participate in the template rendering.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Outputs">
            <summary>
            Gets or sets the collection of outputs supported by the agent, including their type and description.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Template">
            <summary>
            Gets or sets the template options used by the agent, including its type and parser.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentDefinition.Tools">
            <summary>
            Gets or sets the collection of tools used by the agent, including their name, type, and options.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentFactory">
            <summary>
            Represents a factory for creating <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> instances.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentFactory.Types">
            <summary>
            Gets the types of agents this factory can create.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentFactory.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/> class.
            </summary>
            <param name="types">Types of agent this factory can create</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentFactory.IsSupported(Microsoft.SemanticKernel.Agents.AgentDefinition)">
            <summary>
            Return true if this instance of <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/> supports creating agents from the provided <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/>
            </summary>
            <param name="agentDefinition">Definition of the agent to check is supported.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentFactory.CreateAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.Agents.AgentDefinition,Microsoft.SemanticKernel.Agents.AgentCreationOptions,System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> from the specified <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/>.
            </summary>
            <param name="kernel">Kernel instance to associate with the agent.</param>
            <param name="agentDefinition">Definition of the agent to create.</param>
            <param name="agentCreationOptions">Options used when creating the agent.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <return>The created <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>, if null the agent type is not supported.</return>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentFactory.TryCreateAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.Agents.AgentDefinition,Microsoft.SemanticKernel.Agents.AgentCreationOptions,System.Threading.CancellationToken)">
            <summary>
            Tries to create a <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> from the specified <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/>.
            </summary>
            <param name="kernel">Kernel instance to associate with the agent.</param>
            <param name="agentDefinition">Definition of the agent to create.</param>
            <param name="agentCreationOptions">Options used when creating the agent.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <return>The created <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>, if null the agent type is not supported.</return>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentInput">
            <summary>
            Represents an input for an agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.Type">
            <summary>
            Gets or sets the type of the input.
            </summary>
            <remarks>
            This can be either a string, number, array, object, or boolean.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.Name">
            <summary>
            Gets or sets the name of the input.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.Description">
            <summary>
            Gets or sets a description of the input.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.Default">
            <summary>
            Gets or sets a default value for the input.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.Required">
            <summary>
            Gets or sets whether the input is considered required (rather than optional).
            </summary>
            <remarks>
            The default is true.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.JsonSchema">
            <summary>
            Gets or sets JSON Schema describing this input.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.Strict">
            <summary>
            Gets or sets a value indicating whether the input can contain structural text.
            </summary>
            <remarks>
            The default is true.
            When set to false the value of the input is treated as safe content i.e. the input can emit structural text.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentInput.Sample">
            <summary>
            Gets or sets a sample value for the input.
            </summary>
            <remarks>
            This is used to provide examples to the user of the agent.
            This can also be used by developer tooling as the value to use without needing to prompt the developer to enter a value.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentMetadata">
            <summary>
            Defines agent metadata.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentMetadata.Authors">
            <summary>
            Gets or sets the collection of authors associated with the agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentMetadata.Tags">
            <summary>
            Gets or sets the collection of tags associated with the agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentMetadata.ExtensionData">
            <summary>
            Extra properties that may be included in the serialized agent metadata.
            </summary>
            <remarks>
            Used to store agent specific metadata.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentOutput">
            <summary>
            Represents an output for an agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentOutput.Type">
            <summary>
            Gets or sets the type of the output.
            </summary>
            <remarks>
            This can be either a string, number, array, object, or boolean.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentOutput.Name">
            <summary>
            Gets or sets the name of the output.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentOutput.Description">
            <summary>
            Gets or sets a description of the output.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentOutput.JsonSchema">
            <summary>
            Gets or sets JSON Schema describing this output.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentToolDefinition">
            <summary>
            The options for defining a tool.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentToolDefinition.Id">
            <summary>
            The id of the tool.
            </summary>
            <remarks>
            This is typically a short string, but can be any string that is compatible with the agent.
            The id is used to identify the tool in the agent and must be unique in the collection of tools.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentToolDefinition.Type">
            <summary>
            The type of the tool.
            </summary>
            <remarks>
            Used to identify which type of tool is being used e.g., code interpreter, openapi, ...
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentToolDefinition.Description">
            <summary>
            The description of the tool.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentToolDefinition.Options">
            <summary>
            Gets or sets the options for the tool.
            </summary>
            <remarks>
            Used to store tool specific options e.g., files associated with the tool, etc.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AggregatorAgentFactory">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/> which aggregates multiple agent factories.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgentFactory.#ctor(Microsoft.SemanticKernel.Agents.AgentFactory[])">
            <summary>Initializes the instance.</summary>
            <param name="agentFactories">Ordered <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/> instances to aggregate.</param>
            <remarks>
            Where multiple <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/> instances are provided, the first factory that supports the <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/> will be used.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgentFactory.TryCreateAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.Agents.AgentDefinition,Microsoft.SemanticKernel.Agents.AgentCreationOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ModelConnection">
            <summary>
            Defines the connection for a model.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ModelConnection.Type">
            <summary>
            The type of the model connection.
            </summary>
            <remarks>
            Used to identify the type of deployment e.g., azure_openai, openai, ...
            This type will also be used for connection hosting.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ModelConnection.ServiceId">
            <summary>
            Gets or sets the Service ID of the model connection.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ModelConnection.ExtensionData">
            <summary>
            Extra properties that may be included in the serialized model connection.
            </summary>
            <remarks>
            Used to store model specific connection e.g., the deployment name, endpoint, etc.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ModelDefinition">
            <summary>
            Defines the model to be used by an agent.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.ModelDefinition.DefaultApi">
            <summary>
            The default API type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ModelDefinition.Id">
            <summary>
            Gets or sets the unique identifier of the model.
            </summary>
            <remarks>
            This is typically a short string, but can be any string that is compatible with the agent.
            Typically, depending on the provider, this can replace the entire connection settings if
            the provider has a way to resolve the model connection from the id.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ModelDefinition.Api">
            <summary>
            Gets or sets the type of API used by the agent.
            </summary>
            <remarks>
            This is typically a chat or completion API, but can be any API that is compatible with the agent.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ModelDefinition.Options">
            <summary>
            Gets or sets the options used by the agent.
            </summary>
            <remarks>
            This is typically a set of options that are compatible with the API and connection used by the agent.
            This optional section is used to specify the options to be used when executing the agent.
            If this section is not included, the runtime will use the default options for the API and connection used by the agent.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ModelDefinition.Connection">
            <summary>
            Gets or sets the connection used by the agent.
            </summary>
            <remarks>
            This is typically a type and deployment, but can be any connection that is compatible with the agent.
            The type parameter is used to tell the runtime how to load and execute the agent.
            The deployment parameter, in this example, is used to tell the runtime which deployment to use when executing against Azure OpenAI.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentDefinitionExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentDefinitionExtensions.GetDefaultKernelArguments(Microsoft.SemanticKernel.Agents.AgentDefinition,Microsoft.SemanticKernel.Kernel)">
            <summary>
            Creates default <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> from the <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/>.
            </summary>
            <param name="agentDefinition">Agent definition to retrieve default arguments from.</param>
            <param name="kernel">Kernel instance.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentDefinitionExtensions.GetPromptTemplate(Microsoft.SemanticKernel.Agents.AgentDefinition,Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/> from the <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/> if required.
            </summary>
            <param name="agentDefinition">Agent definition to retrieve default arguments from.</param>
            <param name="kernel">Kernel instance.</param>
            <param name="templateFactory">Optional prompt template factory</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentDefinitionExtensions.GetFirstToolDefinition(Microsoft.SemanticKernel.Agents.AgentDefinition,System.String)">
            <summary>
            Get the first tool definition of the specified type.
            </summary>
            <param name="agentDefinition">Agent definition to retrieve the first tool from.</param>
            <param name="toolType">Tool type</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentDefinitionExtensions.GetToolDefinitions(Microsoft.SemanticKernel.Agents.AgentDefinition,System.String)">
            <summary>
            Get all of the tool definitions of the specified type.
            </summary>
            <param name="agentDefinition">Agent definition to retrieve the tools from.</param>
            <param name="toolType">Tool type</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentDefinitionExtensions.HasToolType(Microsoft.SemanticKernel.Agents.AgentDefinition,System.String)">
            <summary>
            Determines if the agent definition has a tool of the specified type.
            </summary>
            <param name="agentDefinition">Agent definition</param>
            <param name="toolType">Tool type</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentToolDefinitionExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.SemanticKernel.Agents.AgentDefinition"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentToolDefinitionExtensions.GetOption``1(Microsoft.SemanticKernel.Agents.AgentToolDefinition,System.String)">
            <summary>
            Get the option value for the specified key.
            </summary>
            <typeparam name="T">Expected type for the option value.</typeparam>
            <param name="agentToolDefinition">Agent definition instance.</param>
            <param name="key">Key of the option value.</param>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Extensions.ChatHistoryExtensions">
            <summary>
            Provides extension methods for <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.ChatHistoryExtensions.ToDescending(Microsoft.SemanticKernel.ChatCompletion.ChatHistory)">
            <summary>
            Enumerates a chat history in descending order.
            </summary>
            <param name="history">The chat history to sort.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.ChatHistoryExtensions.ToDescendingAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory)">
            <summary>
            Enumerates a history in descending order asynchronously.
            </summary>
            <param name="history">The chat history to sort.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetName(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Provides a name for the agent, even if it's the identifier.
            (since <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Name"/> allows null)
            </summary>
            <param name="agent">The target agent</param>
            <returns>The agent name as a non-empty string</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetDisplayName(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Provides the display name of the agent.
            </summary>
            <param name="agent">The target agent</param>
            <remarks>
            Currently, it's intended for telemetry purposes only.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetKernel(Microsoft.SemanticKernel.Agents.Agent,Microsoft.SemanticKernel.Agents.AgentInvokeOptions)">
            <summary>
            Gets the kernel scoped to the current invocation.
            </summary>
            <param name="agent">The <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> whose kernel is used as a fallback if <paramref name="options"/> does not specify one.</param>
            <param name="options">The <see cref="T:Microsoft.SemanticKernel.Agents.AgentInvokeOptions"/> instance containing invocation-specific options. May be <c>null</c>.</param>
            <returns>
            The <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance to use for the current invocation. Returns the kernel from <paramref name="options"/> if specified; otherwise, returns the kernel from <paramref name="agent"/>.
            </returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue">
            <summary>
            Utility class used by <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> to manage the broadcast of
            conversation messages via the <see cref="M:Microsoft.SemanticKernel.Agents.AgentChannel.ReceiveAsync(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)"/>.
            Interaction occurs via two methods:
            - <see cref="M:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.Enqueue(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Agents.Internal.ChannelReference},System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent})"/>: Adds messages to a channel specific queue for processing.
            - <see cref="M:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.EnsureSynchronizedAsync(Microsoft.SemanticKernel.Agents.Internal.ChannelReference,System.Threading.CancellationToken)"/>: Blocks until the specified channel's processing queue is empty.
            </summary>
            <remarks>
            Maintains a set of channel specific queues, each with individual locks.
            Queue specific locks exist to synchronize access to an individual queue only.
            Due to the closed "friend" relationship between with <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>,
            <see cref="T:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue"/> is never invoked concurrently, which eliminates
            race conditions over the queue dictionary.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.BlockDuration">
            <summary>
            Defines the yield duration when waiting on a channel-queue to synchronize
            and drain.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.Enqueue(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Agents.Internal.ChannelReference},System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Enqueue a set of messages for a given channel.
            </summary>
            <param name="channelRefs">The target channels for which to broadcast.</param>
            <param name="messages">The messages being broadcast.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.EnsureSynchronizedAsync(Microsoft.SemanticKernel.Agents.Internal.ChannelReference,System.Threading.CancellationToken)">
            <summary>
            Blocks until a channel-queue is not in a receive state to ensure that
            channel history is complete.
            </summary>
            <param name="channelRef">A <see cref="T:Microsoft.SemanticKernel.Agents.Internal.ChannelReference"/> structure.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>false when channel is no longer receiving.</returns>
            <throws>
            When channel is out of sync.
            </throws>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.ReceiveAsync(Microsoft.SemanticKernel.Agents.Internal.ChannelReference,Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference,System.Threading.CancellationToken)">
            <summary>
            Processes the specified queue with the provided channel, until queue is empty.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference">
            <summary>
            Utility class to associate a queue with its specific lock.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference.IsEmpty">
            <summary>
            Convenience logic
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference.QueueLock">
            <summary>
            Queue specific lock to control queue access with finer granularity
            than the state-lock.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference.Queue">
            <summary>
            The target queue.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference.ReceiveTask">
            <summary>
            The task receiving and processing messages from <see cref="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference.Queue" />.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference.ReceiveFailure">
            <summary>
            Capture any failure that may occur during execution of <see cref="P:Microsoft.SemanticKernel.Agents.Internal.BroadcastQueue.QueueReference.ReceiveTask"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Internal.ChannelReference">
            <summary>
            Tracks channel along with its hashed key.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.ChannelReference.#ctor(Microsoft.SemanticKernel.Agents.AgentChannel,System.String)">
            <summary>
            Tracks channel along with its hashed key.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.ChannelReference.Channel">
            <summary>
            The referenced channel.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.ChannelReference.Hash">
            <summary>
            The channel hash.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Internal.KeyEncoder">
            <summary>
            Utility to encode a list of string keys to an base-64 encoded hash.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.KeyEncoder.GenerateHash(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Produces a base-64 encoded hash for a set of input strings.
            </summary>
            <param name="keys">A set of input strings</param>
            <returns>A base-64 encoded hash</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentChatLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.s_logAgentChatGetChatMessages">
            <summary>
            Logs retrieval of <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> messages.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.LogAgentChatAddingMessages(Microsoft.Extensions.Logging.ILogger,System.String,System.Int32)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> adding messages (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.LogAgentChatAddedMessages(Microsoft.Extensions.Logging.ILogger,System.String,System.Int32)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> added messages (complete).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.LogAgentChatInvokingAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> invoking agent (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.LogAgentChatInvokedAgentMessage(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String,Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> invoked agent message
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.s_logAgentChatInvokedStreamingAgentMessages">
            <summary>
            Logs retrieval of streamed <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> messages.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.LogAgentChatInvokedAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> invoked agent (complete).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.LogAgentChatCreatingChannel(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> creating agent channel (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentChatLogMessages.LogAgentChatCreatedChannel(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> created agent channel (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AggregatorAgentLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgentLogMessages.LogAggregatorAgentCreatingChannel(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> creating channel (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgentLogMessages.LogAggregatorAgentCreatedChannel(Microsoft.Extensions.Logging.ILogger,System.String,System.String,Microsoft.SemanticKernel.Agents.AggregatorMode,System.Type)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> created channel (complete).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgentLogMessages.LogOpenAIAssistantAgentRestoringChannel(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> restoring serialized channel (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AggregatorAgentLogMessages.LogOpenAIAssistantAgentRestoredChannel(Microsoft.Extensions.Logging.ILogger,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AggregatorAgent"/> restored serialized channel (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Serialization.AgentChannelState">
            <summary>
            Captures the serialized state of an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> along with relevant meta-data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentChannelState.ChannelKey">
            <summary>
            The unique key for the channel.
            </summary>
            <remarks>
            This is a hash <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> generates and manages based <see cref="M:Microsoft.SemanticKernel.Agents.Agent.GetChannelKeys"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentChannelState.ChannelType">
            <summary>
            The fully qualified type name of the channel.
            </summary>
            <remarks>
            Not utilized in deserialization, but useful for auditing the serialization payload.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentChannelState.ChannelState">
            <summary>
            The serialized channel state, as provided by <see cref="M:Microsoft.SemanticKernel.Agents.AgentChannel.Serialize"/>.
            </summary>
            <remarks>
            Converter will serialize JSON string as JSON.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Serialization.AgentChatState">
            <summary>
            Captures the serialized state of an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> along with relevant meta-data.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentChatState.Participants">
            <summary>
            Metadata to identify the <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> instances participating in an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentChatState.History">
            <summary>
            The serialized chat history.
            </summary>
            <remarks>
            Converter will serialize JSON string as JSON.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentChatState.Channels">
            <summary>
            The state of each <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> active in an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant">
            <summary>
            References an <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> instance participating in an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant.Id">
            <summary>
            Gets the captured <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Id"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant.Name">
            <summary>
            Gets the captured <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Name"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant.Type">
            <summary>
            Gets the fully qualified <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> type name.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant"/>.
            </summary>
            <remarks>
            This parameterless constructor is for deserialization.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant.#ctor(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.SemanticKernel.Agents.Serialization.AgentParticipant"/> with the specified agent.
            </summary>
            <remarks>
            This is a convenience constructor for serialization.
            </remarks>
            <param name="agent">The referenced <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference">
            <summary>
            Represents a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> for serialization without metadata.
            </summary>
            <param name="message">The referenced message</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference.#ctor(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Represents a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/> for serialization without metadata.
            </summary>
            <param name="message">The referenced message</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference.AuthorName">
            <summary>
            Gets the referenced <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.AuthorName"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference.Role">
            <summary>
            Gets the referenced <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Role"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference.Items">
            <summary>
            Gets the referenced <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Items"/> collection.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference.ModelId">
            <summary>
            Gets the referenced <see cref="P:Microsoft.SemanticKernel.KernelContent.ModelId"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference.MimeType">
            <summary>
            Gets the referenced <see cref="P:Microsoft.SemanticKernel.KernelContent.MimeType"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference.Prepare(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Converts a set of messages to <see cref="T:Microsoft.SemanticKernel.Agents.Serialization.ChatMessageReference"/> instances.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Serialization.JsonChannelStateConverter">
             <summary>
             Translates the serialized state to avoid escaping nested JSON as string.
             </summary>
             <example>
             Without converter:
             <code>
             {
               "state": "{\"key\":\"value\"}"
             }
             </code>
            
             With converter:
             <code>
             {
               "state": {"key": "value"}
             }
             </code>
            
             Always:
             <code>
             {
               "state": "text",
             }
             </code>
             </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Serialization.JsonChannelStateConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Serialization.JsonChannelStateConverter.Write(System.Text.Json.Utf8JsonWriter,System.String,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.StartActivityWithTags(System.Diagnostics.ActivitySource,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Diagnostics.ActivityKind)">
            <summary>
            Starts an activity with the specified name and tags.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetTags(System.Diagnostics.Activity,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds tags to the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.AttachSensitiveDataAsEvent(System.Diagnostics.Activity,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds an event to the activity. Should only be used for events that contain sensitive data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetError(System.Diagnostics.Activity,System.Exception)">
            <summary>
            Sets the error status and type on the activity.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics">
            <summary>
            Model diagnostics helper class that provides a set of methods to trace model activities with the OTel semantic conventions.
            This class contains experimental features and may change in the future.
            To enable these features, set one of the following switches to true:
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnostics`
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnosticsSensitive`
            Or set the following environment variables to true:
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS`
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS_SENSITIVE`
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,System.String,``0)">
            <summary>
            Start a text completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,``0)">
            <summary>
            Start a chat completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartAgentInvocationActivity(System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Start an agent invocation activity and return the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetAgentResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Set the agent response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.EndAgentStreamingResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingChatMessageContent})">
            <summary>
            End the agent streaming response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.TextContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the text completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the chat completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.EndStreaming(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Notify the end of streaming for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetResponseId(System.Diagnostics.Activity,System.String)">
            <summary>
            Set the response id for a given activity.
            </summary>
            <param name="activity">The activity to set the response id</param>
            <param name="responseId">The response id</param>
            <returns>The activity with the response id set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetInputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the input tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the input tokens usage</param>
            <param name="inputTokens">The number of input tokens used</param>
            <returns>The activity with the input tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetOutputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the output tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the output tokens usage</param>
            <param name="outputTokens">The number of output tokens used</param>
            <returns>The activity with the output tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsModelDiagnosticsEnabled">
            <summary>
            Check if model diagnostics is enabled
            Model diagnostics is enabled if either EnableModelDiagnostics or EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsSensitiveEventsEnabled">
            <summary>
            Check if sensitive events are enabled.
            Sensitive events are enabled if EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Convert a chat message to a JSON object based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection)">
            <summary>
            Helper method to convert tool calls to a list of JSON object based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.KernelFunctionMetadata)">
            <summary>
            Convert a function metadata to a JSON object based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.ChatMessageContent,System.Int32)">
            <summary>
            Convert a chat model response to a JSON string based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.TextContent,System.Int32)">
            <summary>
            Convert a text model response to a JSON string based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse``1(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Func{``0,System.Int32,System.String})">
            <summary>
            Set the completion response for a given activity.
            The `formatCompletions` delegate won't be invoked if events are disabled.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.SemanticKernel.StreamingKernelContent}},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the streaming completion response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.OrganizeStreamingContent(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent})">
            <summary>
            Organize streaming content by choice index
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ModelDiagnosticsTags">
            <summary>
            Tags used in model diagnostics
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.AllowedPluginNameSymbolsRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z_]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.AllowedFunctionNameSymbolsRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z_-]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.ParametersUniqueness(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Throw">
            <summary>
            Defines static methods used to throw exceptions.
            </summary>
            <remarks>
            The main purpose is to reduce code size, improve performance, and standardize exception
            messages.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>.
            </summary>
            <typeparam name="T">Argument type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Object to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>,
            or <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type to be checked for <see langword="null"/>.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to be checked for <see langword="null"/>.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to which member belongs.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfMemberNull(myObject, myObject.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws either an <see cref="T:System.ArgumentNullException"/> or an <see cref="T:System.ArgumentException"/>
            if the specified string is <see langword="null"/> or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or whitespace.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the string is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or empty.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfBufferTooSmall(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the argument's buffer size is less than the required buffer size.
            </summary>
            <param name="bufferSize">The actual buffer size.</param>
            <param name="requiredSize">The required buffer size.</param>
            <param name="paramName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the enum value is not valid.
            </summary>
            <param name="argument">The argument to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the collection is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">The collection to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of objects in the collection.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that caused this exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <remarks>
            If the <paramref name="innerException"/> is not a <see langword="null"/>, the current exception is raised in a catch
            block that handles the inner exception.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.FilenameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[^.]+\\.[^.]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character other than '.' atomically at least once.<br/>
            ○ Match '.'.<br/>
            ○ Match a character other than '.' greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ValidHostnameSegment(System.String,System.String)">
            <summary>
            Validates that a hostname segment string is safe for use as a URL segment, preventing URL injection.
            </summary>
            <param name="hostNameSegment">The hostname segment string to validate (e.g., 'us-east1', 'europe-west4')</param>
            <param name="paramName">Optional parameter name for the exception</param>
            <exception cref="T:System.ArgumentException">Thrown when the location contains invalid characters or patterns</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.FunctionName">
            <summary>
            Represents a function name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.PluginName">
            <summary>
            The plugin name.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.FunctionName.Name">
            <summary>
            The function name.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="name">The function name.</param>
            <param name="pluginName">The plugin name.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.ToFullyQualifiedName(System.String,System.String,System.String)">
            <summary>
            Gets the fully-qualified name of the function.
            </summary>
            <param name="functionName">The function name.</param>
            <param name="pluginName">The plugin name.</param>
            <param name="functionNameSeparator">The function name separator.</param>
            <returns>Fully-qualified name of the function.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.FunctionName.Parse(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Microsoft.SemanticKernel.FunctionName"/> class.
            </summary>
            <param name="fullyQualifiedName">Fully-qualified name of the function.</param>
            <param name="functionNameSeparator">The function name separator.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.AppContextSwitchHelper">
            <summary>
            Helper class to get app context switch value
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Returns the value of the specified app switch or environment variable if it is set.
            If the switch or environment variable is not set, return false.
            The app switch value takes precedence over the environment variable.
            </summary>
            <param name="appContextSwitchName">The name of the app switch.</param>
            <param name="envVarName">The name of the environment variable.</param>
            <returns>The value of the app switch or environment variable if it is set; otherwise, false.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Arguments.Extensions.KernelArgumentsExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Arguments.Extensions.KernelArgumentsExtensions.Merge(Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Provides a merged instance of <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> with precedence for override arguments.
            </summary>
            <param name="primaryArguments">Primary arguments to merge. This is the base set of arguments.</param>
            <param name="overrideArguments">The override arguments.</param>
            <remarks>
            This merge preserves original <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> and <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> parameters.
            It allows for incremental addition or replacement of specific parameters while also preserving the ability
            to override the execution settings.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatMessageExtensions.ToChatMessageContent(Microsoft.Extensions.AI.ChatMessage,Microsoft.Extensions.AI.ChatResponse)">
            <summary>Converts a <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> to a <see cref="T:Microsoft.SemanticKernel.ChatMessageContent"/>.</summary>
        </member>
        <member name="M:Microsoft.Extensions.AI.ChatMessageExtensions.ToChatHistory(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage})">
            <summary>Converts a list of <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> to a <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>.</summary>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AllowedPluginNameSymbolsRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedPluginNameSymbolsRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AllowedFunctionNameSymbolsRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowedFunctionNameSymbolsRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FilenameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FilenameRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FilenameRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FilenameRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiWordChars">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
