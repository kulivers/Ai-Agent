<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Agents.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentGroupChat">
            <summary>
            Represents an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/> that supports multi-turn interactions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.IsComplete">
            <summary>
            Gets or sets a value that indicates if the completion criteria have been met.
            </summary>
            <value>
            <see langword="true"/> if the completion criteria have been met; otherwise <see langword="false"/>.
            The default is <see langword="true"/>. Set to <see langword="false"/> to enable more agent interactions.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.ExecutionSettings">
            <summary>
            Gets or sets the settings for defining chat behavior.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.Agents">
            <summary>
            Gets the agents participating in the chat.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.AddAgent(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Add an <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> to the chat.
            </summary>
            <param name="agent">The <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> to add.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.InvokeAsync(System.Threading.CancellationToken)">
            <summary>
            Processes a series of interactions between the <see cref="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.Agents"/> that have joined this <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
            <remarks>
            The interactions will proceed according to the <see cref="T:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy"/> and the
            <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> defined via <see cref="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.ExecutionSettings"/>.
            In the absence of an <see cref="P:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.SelectionStrategy"/>, this method does not invoke any agents.
            Any agent can be explicitly selected by calling <see cref="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.InvokeAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)"/>.
            </remarks>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.InvokeStreamingAsync(System.Threading.CancellationToken)">
            <summary>
            Processes a series of interactions between the <see cref="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.Agents"/> that have joined this <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
            <remarks>
            The interactions will proceed according to the <see cref="T:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy"/> and the
            <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> defined via <see cref="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.ExecutionSettings"/>.
            In the absence of an <see cref="P:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.SelectionStrategy"/>, this method does not invoke any agents.
            Any agent can be explicitly selected by calling <see cref="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.InvokeAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)"/>.
            </remarks>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of streaming messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.InvokeAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <summary>
            Processes a single interaction between a given <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of messages.</returns>
            <remarks>
            The specified agent joins the chat.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.InvokeStreamingAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <summary>
            Processes a single interaction between a given <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> and an <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of messages.</returns>
            <remarks>
            The specified agent joins the chat.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.CreatePromptFunctionForStrategy(System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,System.String[])">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for a given strategy without HTML-encoding the specified parameters.
            </summary>
            <param name="template">The prompt template string that defines the prompt.</param>
            <param name="templateFactory">
            An optional <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="template"/>.
            The default factory is used when none is provided.
            </param>
            <param name="safeParameterNames">The parameter names to exclude from being HTML encoded.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> created via <see cref="T:Microsoft.SemanticKernel.KernelFunctionFactory"/> using the specified template.</returns>
            <remarks>
            This method is particularly targeted to easily avoid encoding the history used by <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy"/>
            or <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChat.#ctor(Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> class.
            </summary>
            <param name="agents">The agents initially participating in the chat.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent">
            <summary>
            Represents a <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> specialization based on <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/>.
            </summary>
            <remarks>
            NOTE: Enable <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.FunctionChoiceBehavior"/> for agent plugins
            (<see cref="P:Microsoft.SemanticKernel.Agents.Agent.Arguments"/>).
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.#ctor(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> class from
            a <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/>.
            </summary>
            <param name="templateConfig">The prompt template configuration.</param>
            <param name="templateFactory">The prompt template factory used to produce the <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/> for the agent.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.InstructionsRole">
            <summary>
            Gets the role used for agent instructions.  Defaults to "system". ////////
            </summary>
            <remarks>
            Certain versions of "O*" series (deep reasoning) models require the instructions
            to be provided as "developer" role.  Other versions support neither role and
            an agent targeting such a model cannot provide instructions.  Agent functionality
            will be dictated entirely by the provided plugins.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.InvokeAsync(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.InvokeAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
            <remarks>
            This method is used by the <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryChannel"/>. Note that if this method is removed, the <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryChannel"/>
            would automatically invoke the overload with <see cref="T:System.Collections.Generic.ICollection`1"/> since it is interchangeable with <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>
            but it's behavior is different, so will not work as expected.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.InvokeStreamingAsync(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent},Microsoft.SemanticKernel.Agents.AgentThread,Microsoft.SemanticKernel.Agents.AgentInvokeOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.InvokeStreamingAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
            <remarks>
            This method is used by the <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryChannel"/>. Note that if this method is removed, the <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryChannel"/>
            would automatically invoke the overload with <see cref="T:System.Collections.Generic.ICollection`1"/> since it is interchangeable with <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/>
            but it's behavior is different, so will not work as expected.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgent.RestoreChannelAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgentExtensions">
            <summary>
            Exposes a Semantic Kernel <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgentExtensions.AsAIAgent(Microsoft.SemanticKernel.Agents.ChatCompletionAgent)">
            <summary>
            Exposes a Semantic Kernel Agent Framework <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.
            </summary>
            <param name="chatCompletionAgent">The Semantic Kernel <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> to expose as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/>.</param>
            <returns>The Semantic Kernel Agent Framework <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> exposed as a Microsoft Agent Framework <see cref="T:Microsoft.Agents.AI.AIAgent"/></returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ChatHistoryAgent">
            <summary>
            Represents a <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> specialization bound to a <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryChannel"/>.
            </summary>
            <remarks>
            NOTE: Enable <see cref="P:Microsoft.SemanticKernel.PromptExecutionSettings.FunctionChoiceBehavior"/> for agent plugins
            (<see cref="P:Microsoft.SemanticKernel.Agents.Agent.Arguments"/>).
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ChatHistoryAgent.HistoryReducer">
            <summary>
            Gets an optional <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer"/> to reduce the history.
            </summary>
            <remarks>
            The reducer is automatically applied to the history before invoking the agent, only when using
            an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChat"/>. It must be explicitly applied via <see cref="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgent.ReduceAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Threading.CancellationToken)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgent.InvokeAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Invokes the assistant to respond to the provided history.
            </summary>
            <param name="history">The conversation history.</param>
            <param name="arguments">Optional arguments to pass to the agents's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use by the agent.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of response messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgent.InvokeStreamingAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <summary>
            Invokes the assistant to respond to the provided history with streaming response.
            </summary>
            <param name="history">The conversation history.</param>
            <param name="arguments">Optional arguments to pass to the agents's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use by the agent.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous enumeration of response messages.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgent.ReduceAsync(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.Threading.CancellationToken)">
            <summary>
            Reduces the provided history.
            </summary>
            <param name="history">The source history.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns><see langword="true"/> if reduction occurred.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgent.GetChannelKeys">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgent.CreateChannelAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread">
            <summary>
            Represents a conversation thread based on an instance of <see cref="P:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.ChatHistory"/> that is managed inside this class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.#ctor(Microsoft.SemanticKernel.ChatCompletion.ChatHistory,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread"/> class that resumes an existing thread.
            </summary>
            <param name="chatHistory">An existing chat history to base this thread on.</param>
            <param name="id">The id of the existing thread. If not provided, a new one will be generated.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.ChatHistory">
            <summary>
            Gets the underlying <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistory"/> object that stores the chat history for this thread.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.CreateAsync(System.Threading.CancellationToken)">
            <summary>
            Creates the thread and returns the thread id.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the thread has been created.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.CreateInternalAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.DeleteInternalAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.OnNewMessageInternalAsync(Microsoft.SemanticKernel.ChatMessageContent,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryAgentThread.GetMessagesAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously retrieves all messages in the thread.
            </summary>
            <remarks>
            Messages will be returned in ascending chronological order.
            </remarks>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The messages in the thread.</returns>
            <exception cref="T:System.InvalidOperationException">The thread has been deleted.</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ChatHistoryChannel">
            <summary>
            Represents an <see cref="T:Microsoft.SemanticKernel.Agents.AgentChannel"/> specialization that acts upon a <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryAgent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryChannel.InvokeAsync(Microsoft.SemanticKernel.Agents.Agent,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryChannel.InvokeStreamingAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryChannel.ReceiveAsync(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryChannel.GetHistoryAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryChannel.ResetAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryChannel.Serialize">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatHistoryChannel.#ctor(Microsoft.SemanticKernel.ChatCompletion.ChatHistory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.ChatHistoryChannel"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings">
            <summary>
            Provides settings that affect the behavior of <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> instances.
            </summary>
            <remarks>
            The default behavior results in no agent selection.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.TerminationStrategy">
            <summary>
            Gets the strategy for terminating the agent.
            </summary>
            <value>
            The strategy for terminating the agent. The default strategy a single iteration and no termination criteria.
            </value>
            <seealso cref="P:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.SelectionStrategy"/>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.SelectionStrategy">
            <summary>
            Gets the strategy for selecting the next agent.
            </summary>
            <value>
            The strategy for selecting the next agent. The default is <see cref="T:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategy"/>.
            </value>
            <seealso cref="P:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.TerminationStrategy"/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.DefaultTerminationStrategy">
            <summary>
            The termination strategy attached to the default state of <see cref="P:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.TerminationStrategy"/>.
            This strategy will execute without signaling termination.  Execution of <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> will only be
            bound by <see cref="P:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.MaximumIterations"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.AgentGroupChatSettings.DefaultTerminationStrategy.ShouldAgentTerminateAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.AggregateTerminationCondition">
            <summary>
            Defines aggregation behavior for <see cref="T:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategy"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Chat.AggregateTerminationCondition.All">
            <summary>
            All aggregated strategies must agree on termination.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Chat.AggregateTerminationCondition.Any">
            <summary>
            Any single aggregated strategy will terminate.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategy">
            <summary>
            Provides methods to aggregate a set of <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> objects.
            </summary>
            <param name="strategies">The set of strategies upon which to aggregate.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategy.#ctor(Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy[])">
            <summary>
            Provides methods to aggregate a set of <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> objects.
            </summary>
            <param name="strategies">The set of strategies upon which to aggregate.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategy.Condition">
            <summary>
            Gets the logical operation for aggregation.
            </summary>
            <value>
            The logical operation for aggregation, which can be <see cref="F:Microsoft.SemanticKernel.Agents.Chat.AggregateTerminationCondition.All"/> or <see cref="F:Microsoft.SemanticKernel.Agents.Chat.AggregateTerminationCondition.Any"/>. The default is <see cref="F:Microsoft.SemanticKernel.Agents.Chat.AggregateTerminationCondition.All"/>.
            </value>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategy.ShouldAgentTerminateAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy">
            <summary>
            Determines agent selection based on the evaluation of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <param name="function">A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> used for selection criteria.</param>
            <param name="kernel">A kernel instance with services for function execution.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.Kernel)">
            <summary>
            Determines agent selection based on the evaluation of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <param name="function">A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> used for selection criteria.</param>
            <param name="kernel">A kernel instance with services for function execution.</param>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.DefaultAgentsVariableName">
            <summary>
            The default value for <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.AgentsVariableName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.DefaultHistoryVariableName">
            <summary>
            The default value for <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.HistoryVariableName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.AgentsVariableName">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> key associated with the list of agent names when
            invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.HistoryVariableName">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> key associated with the chat history when
            invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Arguments">
            <summary>
            Gets the optional arguments used when invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Kernel">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.Kernel"/> used when invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Function">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> invoked as selection criteria.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.EvaluateNameOnly">
            <summary>
            Gets a value that indicates whether only the agent name is included in the history when invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.HistoryReducer">
            <summary>
            Gets an optional <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer"/> to reduce the history.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.UseInitialAgentAsFallback">
            <summary>
            Gets a value that indicates whether <see cref="P:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy.InitialAgent"/> is used in the event of a failure to select an agent.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.ResultParser">
            <summary>
            Gets a callback responsible for translating the <see cref="T:Microsoft.SemanticKernel.FunctionResult"/>
            to the termination criteria.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.SelectAgentAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.Agents.Agent},System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy">
            <summary>
            Signals termination based on the evaluation of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <param name="function">A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> used for termination criteria.</param>
            <param name="kernel">A kernel instance with services for function execution.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.#ctor(Microsoft.SemanticKernel.KernelFunction,Microsoft.SemanticKernel.Kernel)">
            <summary>
            Signals termination based on the evaluation of a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.
            </summary>
            <param name="function">A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> used for termination criteria.</param>
            <param name="kernel">A kernel instance with services for function execution.</param>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.DefaultAgentVariableName">
            <summary>
            The default value for <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.AgentVariableName"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.DefaultHistoryVariableName">
            <summary>
            The default value for <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.HistoryVariableName"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.AgentVariableName">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> key associated with the agent name when
            invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.HistoryVariableName">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> key associated with the chat history when
            invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Arguments">
            <summary>
            Gets optional arguments used when invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Kernel">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.Kernel"/> used when invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Function">
            <summary>
            Gets the <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> invoked as termination criteria.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.EvaluateNameOnly">
            <summary>
            Gets a value that indicates whether only the agent name is included in the history when invoking <see cref="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.Function"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.ResultParser">
            <summary>
            Gets a callback responsible for translating the <see cref="T:Microsoft.SemanticKernel.FunctionResult"/>
            to the termination criteria.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.HistoryReducer">
            <summary>
            Gets an optional <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatHistoryReducer"/> to reduce the history.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy.ShouldAgentTerminateAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy">
            <summary>
            Signals termination when the most recent message matches against the defined regular expressions
            for the specified agent (if provided).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy"/> class.
            </summary>
            <param name="expressions">
            A list of regular expressions to match against an agent's last message to
            determine whether processing should terminate.
            </param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy.#ctor(System.Text.RegularExpressions.Regex[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy"/> class.
            </summary>
            <param name="expressions">
            A list of regular expressions to match against an agent's last message to
            determine whether processing should terminate.
            </param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy.ShouldAgentTerminateAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy">
            <summary>
            Provides a base strategy class for selecting the next agent for an <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy.HasSelected">
            <summary>
            Gets a value that indicates if an agent has been selected (first time).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy.InitialAgent">
            <summary>
            Gets or sets an optional agent for initial selection.
            </summary>
            <remarks>
            Setting this property is useful to avoid latency in initial agent selection.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> associated with the <see cref="T:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy.NextAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.Agents.Agent},System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Determines which agent goes next.
            </summary>
            <param name="agents">The agents participating in chat.</param>
            <param name="history">The chat history.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The agent that will take the next turn.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.SelectionStrategy.SelectAgentAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.Agents.Agent},System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Determines which agent goes next.
            </summary>
            <param name="agents">The agents participating in chat.</param>
            <param name="history">The chat history.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The agent that will take the next turn.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategy">
            <summary>
            Represents a round-robin turn-taking strategy. Agent order is based on the order
            in which they joined <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategy.Reset">
            <summary>
            Resets the selection to the initial (first) agent. Agent order is based on the order
            in which they joined <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategy.SelectAgentAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.Agents.Agent},System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy">
            <summary>
            Provides a base strategy class for defining termination criteria for an <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.DefaultMaximumIterations">
            <summary>
            Specifies a reasonable limit on the number of turns.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.MaximumIterations">
            <summary>
            Gets or sets the maximum number of agent interactions for a given chat invocation.
            </summary>
            <value>
            The default is <see cref="F:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.DefaultMaximumIterations"/>.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.AutomaticReset">
            <summary>
            Gets or sets a value that indicates whether <see cref="P:Microsoft.SemanticKernel.Agents.AgentGroupChat.IsComplete"/>
            is automatically cleared if the caller
            proceeds with invocation subsequent to achieving termination criteria.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.Agents">
            <summary>
            Gets or sets the set of agents for which this strategy is applicable.
            </summary>
            <value>
            The default value is that any agent is evaluated.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.Logger">
            <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger"/> associated with the <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.ShouldAgentTerminateAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Evaluates termination once <see cref="P:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.Agents"/> is evaluated.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy.ShouldTerminateAsync(Microsoft.SemanticKernel.Agents.Agent,System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <summary>
            Evaluates the input message and determines if the chat has met its completion criteria.
            </summary>
            <param name="agent">The agent actively interacting with the chat.</param>
            <param name="history">The most recent message.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns><see langword="true"/> if the chat loop should be terminated.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategyLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategy"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategyLogMessages.LogAggregatorTerminationStrategyEvaluating(Microsoft.Extensions.Logging.ILogger,System.String,System.Int32,Microsoft.SemanticKernel.Agents.Chat.AggregateTerminationCondition)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.AggregatorTerminationStrategy"/> invoking agent (started).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionStrategyLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionStrategyLogMessages.LogKernelFunctionSelectionStrategyInvokingFunction(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy"/> invoking function (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionStrategyLogMessages.LogKernelFunctionSelectionStrategyInvokedFunction(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String,System.Type)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionSelectionStrategy"/> invoked function (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategyLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategyLogMessages.LogKernelFunctionTerminationStrategyInvokingFunction(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy"/> invoking function (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategyLogMessages.LogKernelFunctionTerminationStrategyInvokedFunction(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String,System.Type)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.KernelFunctionTerminationStrategy"/> invoked function (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.RegExTerminationStrategyLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.RegExTerminationStrategyLogMessages.LogRegexTerminationStrategyEvaluating(Microsoft.Extensions.Logging.ILogger,System.String,System.Int32)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy"/> begin evaluation (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.RegExTerminationStrategyLogMessages.LogRegexTerminationStrategyEvaluatingExpression(Microsoft.Extensions.Logging.ILogger,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy"/> evaluating expression (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.RegExTerminationStrategyLogMessages.LogRegexTerminationStrategyMatchedExpression(Microsoft.Extensions.Logging.ILogger,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy"/> expression matched (complete).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.RegExTerminationStrategyLogMessages.LogRegexTerminationStrategyNoMatch(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.RegexTerminationStrategy"/> no match (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategyLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategy"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategyLogMessages.LogSequentialSelectionStrategySelectedAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.SequentialSelectionStrategy"/> selected agent (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategyLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategyLogMessages.LogTerminationStrategyEvaluatingCriteria(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> evaluating criteria (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategyLogMessages.LogTerminationStrategyAgentOutOfScope(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> agent out of scope.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategyLogMessages.LogTerminationStrategyEvaluatedCriteria(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String,System.Boolean)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.Chat.TerminationStrategy"/> evaluated criteria (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgentFactory">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.Agents.AgentFactory"/> which creates instances of <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.ChatCompletionAgentFactory.ChatCompletionAgentType">
            <summary>
            The type of the chat completion agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgentFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgentFactory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgentFactory.TryCreateAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.Agents.AgentDefinition,Microsoft.SemanticKernel.Agents.AgentCreationOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentKernelFunctionFactory">
            <summary>
            Provides factory methods for creating implementations of <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> backed by an <see cref="T:Microsoft.SemanticKernel.Agents.Agent" />.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentKernelFunctionFactory.CreateFromAgent(Microsoft.SemanticKernel.Agents.Agent,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> that will invoke the provided Agent.
            </summary>
            <param name="agent">The <see cref="T:Microsoft.SemanticKernel.Agents.Agent" /> to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="functionName">The name to use for the function. If null, it will default to the agent name.</param>
            <param name="description">The description to use for the function. If null, it will default to agent description.</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to query and additional instructions parameters.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt">
            <summary>
            Present a <see cref="T:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt"/> for serialization without metadata.
            </summary>
            <param name="message">The referenced message</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt.#ctor(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Present a <see cref="T:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt"/> for serialization without metadata.
            </summary>
            <param name="message">The referenced message</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt.Role">
            <summary>
            The string representation of the <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Role"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt.Name">
            <summary>
            The referenced <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.AuthorName"/> property.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt.Content">
            <summary>
            The referenced <see cref="P:Microsoft.SemanticKernel.ChatMessageContent.Content"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt.Format(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Boolean)">
            <summary>
            Convenience method to format a set of messages for use in a prompt.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Internal.ChatMessageForPrompt.Prepare``1(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Func{Microsoft.SemanticKernel.ChatMessageContent,``0})">
            <summary>
            Convenience method to reference a set of messages.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.AgentGroupChatLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChatLogMessages.LogAgentGroupChatInvokingAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> invoking agent (started).
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Agents.AgentGroupChatLogMessages.s_logAgentGroupChatInvokingAgents">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> invoking agents (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChatLogMessages.LogAgentGroupChatSelectingAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.Type)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> selecting agent (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChatLogMessages.LogAgentGroupChatNoAgentSelected(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> Unable to select agent.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChatLogMessages.LogAgentGroupChatSelectedAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.Type,System.String,System.String,System.Type)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> selected agent (complete).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.AgentGroupChatLogMessages.LogAgentGroupChatYield(Microsoft.Extensions.Logging.ILogger,System.String,System.Boolean)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.AgentGroupChat"/> yield chat.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgentLogMessages">
            <summary>
            Extensions for logging <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> invocations.
            </summary>
            <remarks>
            This extension uses the <see cref="T:Microsoft.Extensions.Logging.LoggerMessageAttribute"/> to
            generate logging code at compile time to achieve optimized code.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgentLogMessages.LogAgentChatServiceInvokingAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String,System.Type)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> invoking agent (started).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgentLogMessages.LogAgentChatServiceInvokedAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String,System.Type,System.Int32)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> invoked agent (complete).
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.ChatCompletionAgentLogMessages.LogAgentChatServiceInvokedStreamingAgent(Microsoft.Extensions.Logging.ILogger,System.String,System.String,System.String,System.Type)">
            <summary>
            Logs <see cref="T:Microsoft.SemanticKernel.Agents.ChatCompletionAgent"/> invoked streaming agent (complete).
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions">
            <summary>
            Extension methods for <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetName(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Provides a name for the agent, even if it's the identifier.
            (since <see cref="P:Microsoft.SemanticKernel.Agents.Agent.Name"/> allows null)
            </summary>
            <param name="agent">The target agent</param>
            <returns>The agent name as a non-empty string</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetDisplayName(Microsoft.SemanticKernel.Agents.Agent)">
            <summary>
            Provides the display name of the agent.
            </summary>
            <param name="agent">The target agent</param>
            <remarks>
            Currently, it's intended for telemetry purposes only.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Agents.Extensions.AgentExtensions.GetKernel(Microsoft.SemanticKernel.Agents.Agent,Microsoft.SemanticKernel.Agents.AgentInvokeOptions)">
            <summary>
            Gets the kernel scoped to the current invocation.
            </summary>
            <param name="agent">The <see cref="T:Microsoft.SemanticKernel.Agents.Agent"/> whose kernel is used as a fallback if <paramref name="options"/> does not specify one.</param>
            <param name="options">The <see cref="T:Microsoft.SemanticKernel.Agents.AgentInvokeOptions"/> instance containing invocation-specific options. May be <c>null</c>.</param>
            <returns>
            The <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance to use for the current invocation. Returns the kernel from <paramref name="options"/> if specified; otherwise, returns the kernel from <paramref name="agent"/>.
            </returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AgentKernelPluginFactory">
            <summary>
            Extension methods for creating KernelPlugin instances from agents.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AgentKernelPluginFactory.CreateFromAgents(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Agents.Agent})">
            <summary>
            Creates a plugin from a collection of agents. Each agent is converted into a KernelFunction via AgentKernelFunctionFactory.
            </summary>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <param name="agents">A collection of agents to include in the plugin.</param>
            <returns>A KernelPlugin with functions derived from the provided agents.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when agents is null.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.AgentKernelPluginFactory.CreateFromAgents(System.String,Microsoft.SemanticKernel.Agents.Agent[])">
            <summary>
            Creates a plugin from an array of agents. Each agent is converted into a KernelFunction via AgentKernelFunctionFactory.
            </summary>
            <param name="pluginName">The name for the plugin.</param>
            <param name="agents">The agents to include in the plugin.</param>
            <returns>A KernelPlugin with functions derived from the provided agents.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Arguments.Extensions.CoreKernelArgumentsExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.SemanticKernel.KernelArguments"/>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Arguments.Extensions.CoreKernelArgumentsExtensions.MergeArguments(Microsoft.SemanticKernel.KernelArguments,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Provides a merged instance of <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> with precedence for override arguments.
            </summary>
            <param name="primaryArguments">Primary arguments to merge. This is the base set of arguments.</param>
            <param name="overrideArguments">The override arguments.</param>
            <remarks>
            This merge preserves original <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/> and <see cref="T:Microsoft.SemanticKernel.KernelArguments"/> parameters.
            It allows for incremental addition or replacement of specific parameters while also preserving the ability
            to override the execution settings.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.StartActivityWithTags(System.Diagnostics.ActivitySource,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Diagnostics.ActivityKind)">
            <summary>
            Starts an activity with the specified name and tags.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetTags(System.Diagnostics.Activity,System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds tags to the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.AttachSensitiveDataAsEvent(System.Diagnostics.Activity,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds an event to the activity. Should only be used for events that contain sensitive data.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ActivityExtensions.SetError(System.Diagnostics.Activity,System.Exception)">
            <summary>
            Sets the error status and type on the activity.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics">
            <summary>
            Model diagnostics helper class that provides a set of methods to trace model activities with the OTel semantic conventions.
            This class contains experimental features and may change in the future.
            To enable these features, set one of the following switches to true:
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnostics`
                `Microsoft.SemanticKernel.Experimental.GenAI.EnableOTelDiagnosticsSensitive`
            Or set the following environment variables to true:
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS`
               `SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS_SENSITIVE`
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,System.String,``0)">
            <summary>
            Start a text completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartCompletionActivity``1(System.Uri,System.String,System.String,Microsoft.SemanticKernel.ChatCompletion.ChatHistory,``0)">
            <summary>
            Start a chat completion activity for a given model.
            The activity will be tagged with the a set of attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.StartAgentInvocationActivity(System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Collections.Generic.ICollection{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Start an agent invocation activity and return the activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetAgentResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent})">
            <summary>
            Set the agent response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.EndAgentStreamingResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingChatMessageContent})">
            <summary>
            End the agent streaming response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.TextContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the text completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.ChatMessageContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the chat completion response for a given activity.
            The activity will be enriched with the response attributes specified by the semantic conventions.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.EndStreaming(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Notify the end of streaming for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetResponseId(System.Diagnostics.Activity,System.String)">
            <summary>
            Set the response id for a given activity.
            </summary>
            <param name="activity">The activity to set the response id</param>
            <param name="responseId">The response id</param>
            <returns>The activity with the response id set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetInputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the input tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the input tokens usage</param>
            <param name="inputTokens">The number of input tokens used</param>
            <returns>The activity with the input tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetOutputTokensUsage(System.Diagnostics.Activity,System.Int32)">
            <summary>
            Set the output tokens usage for a given activity.
            </summary>
            <param name="activity">The activity to set the output tokens usage</param>
            <param name="outputTokens">The number of output tokens used</param>
            <returns>The activity with the output tokens usage set for chaining</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsModelDiagnosticsEnabled">
            <summary>
            Check if model diagnostics is enabled
            Model diagnostics is enabled if either EnableModelDiagnostics or EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.IsSensitiveEventsEnabled">
            <summary>
            Check if sensitive events are enabled.
            Sensitive events are enabled if EnableSensitiveEvents is set to true and there are listeners.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatMessageContent)">
            <summary>
            Convert a chat message to a JSON object based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.ChatCompletion.ChatMessageContentItemCollection)">
            <summary>
            Helper method to convert tool calls to a list of JSON object based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsFormat(Microsoft.SemanticKernel.KernelFunctionMetadata)">
            <summary>
            Convert a function metadata to a JSON object based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.ChatMessageContent,System.Int32)">
            <summary>
            Convert a chat model response to a JSON string based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ToGenAIConventionsChoiceFormat(Microsoft.SemanticKernel.TextContent,System.Int32)">
            <summary>
            Convert a text model response to a JSON string based on the OTel GenAI Semantic Conventions format
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse``1(System.Diagnostics.Activity,System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Func{``0,System.Int32,System.String})">
            <summary>
            Set the completion response for a given activity.
            The `formatCompletions` delegate won't be invoked if events are disabled.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.SetCompletionResponse(System.Diagnostics.Activity,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{Microsoft.SemanticKernel.StreamingKernelContent}},System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.FunctionCallContent},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Set the streaming completion response for a given activity.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.OrganizeStreamingContent(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.StreamingKernelContent})">
            <summary>
            Organize streaming content by choice index
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Diagnostics.ModelDiagnostics.ModelDiagnosticsTags">
            <summary>
            Tags used in model diagnostics
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelVerify.ParametersUniqueness(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.KernelParameterMetadata})">
            <summary>
            Make sure every function parameter name is unique
            </summary>
            <param name="parameters">List of parameters</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Throw">
            <summary>
            Defines static methods used to throw exceptions.
            </summary>
            <remarks>
            The main purpose is to reduce code size, improve performance, and standardize exception
            messages.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>.
            </summary>
            <typeparam name="T">Argument type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Object to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the specified argument is <see langword="null"/>,
            or <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type to be checked for <see langword="null"/>.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to be checked for <see langword="null"/>.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfNullOrMemberNull(myObject, myObject?.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfMemberNull``2(``0,``1,System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException" /> if the specified member is <see langword="null"/>.
            </summary>
            <typeparam name="TParameter">Argument type.</typeparam>
            <typeparam name="TMember">Member type to be checked for <see langword="null"/>.</typeparam>
            <param name="argument">Argument to which member belongs.</param>
            <param name="member">Object member to be checked for <see langword="null"/>.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <param name="memberName">The name of the member.</param>
            <returns>The original value of <paramref name="member"/>.</returns>
            <example>
            <code language="csharp">
            Throws.IfMemberNull(myObject, myObject.MyProperty)
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrWhitespace(System.String,System.String)">
            <summary>
            Throws either an <see cref="T:System.ArgumentNullException"/> or an <see cref="T:System.ArgumentException"/>
            if the specified string is <see langword="null"/> or whitespace respectively.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or whitespace.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the string is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">String to be checked for <see langword="null"/> or empty.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfBufferTooSmall(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the argument's buffer size is less than the required buffer size.
            </summary>
            <param name="bufferSize">The actual buffer size.</param>
            <param name="requiredSize">The required buffer size.</param>
            <param name="paramName">The name of the parameter to be checked.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the enum value is not valid.
            </summary>
            <param name="argument">The argument to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of the enumeration.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if the collection is <see langword="null"/>,
            or <see cref="T:System.ArgumentException"/> if it is empty.
            </summary>
            <param name="argument">The collection to evaluate.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <typeparam name="T">The type of objects in the collection.</typeparam>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentNullException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="actualValue">The value of the argument that caused this exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.ArgumentException(System.String,System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/>.
            </summary>
            <param name="paramName">The name of the parameter that caused the exception.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <remarks>
            If the <paramref name="innerException"/> is not a <see langword="null"/>, the current exception is raised in a catch
            block that handles the inner exception.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.InvalidOperationException(System.String,System.Exception)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt32,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Int64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/>  if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.UInt64,System.UInt64,System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.UInt64,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less than min.
            </summary>
            <param name="argument">Number to be expected being less than min.</param>
            <param name="min">The number that must be less than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThan(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater than max.
            </summary>
            <param name="argument">Number to be expected being greater than max.</param>
            <param name="max">The number that must be greater than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfLessThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is less or equal than min.
            </summary>
            <param name="argument">Number to be expected being less or equal than min.</param>
            <param name="min">The number that must be less or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfGreaterThanOrEqual(System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is greater or equal than max.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="max">The number that must be greater or equal than the argument.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfOutOfRange(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is not in the specified range.
            </summary>
            <param name="argument">Number to be expected being greater or equal than max.</param>
            <param name="min">The lower bound of the allowed range of argument values.</param>
            <param name="max">The upper bound of the allowed range of argument values.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Throw.IfZero(System.Double,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if the specified number is equal to 0.
            </summary>
            <param name="argument">Number to be expected being not equal to zero.</param>
            <param name="paramName">The name of the parameter being checked.</param>
            <returns>The original value of <paramref name="argument"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.NotNull(System.Object,System.String)">
            <summary>
            Equivalent of ArgumentNullException.ThrowIfNull
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Verify.ValidHostnameSegment(System.String,System.String)">
            <summary>
            Validates that a hostname segment string is safe for use as a URL segment, preventing URL injection.
            </summary>
            <param name="hostNameSegment">The hostname segment string to validate (e.g., 'us-east1', 'europe-west4')</param>
            <param name="paramName">Optional parameter name for the exception</param>
            <exception cref="T:System.ArgumentException">Thrown when the location contains invalid characters or patterns</exception>
        </member>
        <member name="T:Microsoft.SemanticKernel.TypeConverterFactory">
            <summary>
            Factory for creating TypeConverter instances based on a provided type.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TypeConverterFactory.GetTypeConverter(System.Type)">
            <summary>
            Returns a TypeConverter instance for the specified type.
            </summary>
            <param name="type">The Type of the object to convert.</param>
            <returns>A TypeConverter instance if a suitable converter is found, otherwise null.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.AppContextSwitchHelper">
            <summary>
            Helper class to get app context switch value
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Returns the value of the specified app switch or environment variable if it is set.
            If the switch or environment variable is not set, return false.
            The app switch value takes precedence over the environment variable.
            </summary>
            <param name="appContextSwitchName">The name of the app switch.</param>
            <param name="envVarName">The name of the environment variable.</param>
            <returns>The value of the app switch or environment variable if it is set; otherwise, false.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Polyfill for the DynamicallyAccessedMembersAttribute not available in .NET Standard 2.0.
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Polyfill for the RequiresDynamicCodeAttribute not available in .NET Standard 2.0.
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Polyfill for the RequiresUnreferencedCodeAttribute not available in .NET Standard 2.0.
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Polyfill for the UnconditionalSuppressMessageAttribute introduced in .NET 8.0
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.UnreachableException">
            <summary>
            Exception thrown when the program executes an instruction that was thought to be unreachable.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/> class with the default error message.
            </summary>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:System.Diagnostics.UnreachableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.UnreachableException"/>
            class with a specified error message and a reference to the inner exception that is the cause of
            this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:System.ExceptionExtensions">
            <summary>
            Exception extension methods.
            </summary>
        </member>
        <member name="M:System.ExceptionExtensions.IsCriticalException(System.Exception)">
            <summary>
            Check if an exception is of a type that should not be caught by the kernel.
            </summary>
            <param name="ex">Exception.</param>
            <returns>True if <paramref name="ex"/> is a critical exception and should not be caught.</returns>
        </member>
    </members>
</doc>
