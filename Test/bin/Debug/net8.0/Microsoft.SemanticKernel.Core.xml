<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SemanticKernel.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryReducerExtensions">
            <summary>
            Discrete operations used when reducing chat history.
            </summary>
            <remarks>
            Allows for improved testability.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryReducerExtensions.Extract(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Int32,System.Nullable{System.Int32},Microsoft.SemanticKernel.ChatMessageContent,System.Func{Microsoft.SemanticKernel.ChatMessageContent,System.Boolean})">
            <summary>
            Extract a range of messages from the source history.
            </summary>
            <param name="chatHistory">The source history</param>
            <param name="startIndex">The index of the first message to extract</param>
            <param name="finalIndex">The index of the last message to extract</param>
            <param name="systemMessage">An optional system message content to include</param>
            <param name="filter">The optional filter to apply to each message</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryReducerExtensions.LocateSummarizationBoundary(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.String)">
            <summary>
            Identify the index of the first message that is not a summary message, as indicated by
            the presence of the specified metadata key.
            </summary>
            <param name="chatHistory">The source history</param>
            <param name="summaryKey">The metadata key that identifies a summary message.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryReducerExtensions.LocateSafeReductionIndex(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Int32,System.Nullable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Identify the index of the first message at or beyond the specified targetCount that
            does not orphan sensitive content.
            Specifically: function calls and results shall not be separated since chat-completion requires that
            a function-call always be followed by a function-result.
            In addition, the first user message (if present) within the threshold window will be included
            in order to maintain context with the subsequent assistant responses.
            </summary>
            <param name="chatHistory">The source history</param>
            <param name="targetCount">The desired message count, should reduction occur.</param>
            <param name="thresholdCount">
            The threshold, beyond targetCount, required to trigger reduction.
            History is not reduces it the message count is less than targetCount + thresholdCount.
            </param>
            <param name="offsetCount">
            Optionally ignore an offset from the start of the history.
            This is useful when messages have been injected that are not part of the raw dialog
            (such as summarization).
            </param>
            <param name="hasSystemMessage">Indicates whether chat history contains system message.</param>
            <returns>An index that identifies the starting point for a reduced history that does not orphan sensitive content.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer">
            <summary>
            Reduce the chat history by summarizing message past the target message count.
            </summary>
            <remarks>
            Summarization will always avoid orphaning function-content as the presence of
            a function-call _must_ be followed by a function-result.  When a threshold count is
            is provided (recommended), reduction will scan within the threshold window in an attempt to
            avoid orphaning a user message from an assistant response.
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.SummaryMetadataKey">
            <summary>
            Metadata key to indicate a summary message.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.DefaultSummarizationPrompt">
            <summary>
            The default summarization system instructions.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.SummarizationInstructions">
            <summary>
            System instructions for summarization.  Defaults to <see cref="F:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.DefaultSummarizationPrompt"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.FailOnError">
            <summary>
            Flag to indicate if an exception should be thrown if summarization fails.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.UseSingleSummary">
            <summary>
            Flag to indicate summarization is maintained in a single message, or if a series of
            summations are generated over time.
            </summary>
            <remarks>
            Not using a single summary may ultimately result in a chat history that exceeds the token limit.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.#ctor(Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer"/> class.
            </summary>
            <param name="service">A <see cref="T:Microsoft.SemanticKernel.ChatCompletion.IChatCompletionService"/> instance to be used for summarization.</param>
            <param name="targetCount">The desired number of target messages after reduction.</param>
            <param name="thresholdCount">An optional number of messages beyond the 'targetCount' that must be present in order to trigger reduction/</param>
            <remarks>
            While the 'thresholdCount' is optional, it is recommended to provided so that reduction is not triggered
            for every incremental addition to the chat history beyond the 'targetCount'.
            </remarks>>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistorySummarizationReducer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryTruncationReducer">
            <summary>
            Truncate the chat history to the target message count.
            </summary>
            <remarks>
            Truncation will always avoid orphaning function-content as the presence of
            a function-call _must_ be followed by a function-result.  When a threshold count is
            is provided (recommended), reduction will scan within the threshold window in an attempt to
            avoid orphaning a user message from an assistant response.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryTruncationReducer.#ctor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryTruncationReducer"/> class.
            </summary>
            <param name="targetCount">The desired number of target messages after reduction.</param>
            <param name="thresholdCount">An optional number of messages beyond the 'targetCount' that must be present in order to trigger reduction/</param>
            <remarks>
            While the 'thresholdCount' is optional, it is recommended to provided so that reduction is not triggered
            for every incremental addition to the chat history beyond the 'targetCount'.
            </remarks>>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryTruncationReducer.ReduceAsync(System.Collections.Generic.IReadOnlyList{Microsoft.SemanticKernel.ChatMessageContent},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryTruncationReducer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.ChatCompletion.ChatHistoryTruncationReducer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.BinaryContentExtensions">
            <summary>
            Provides extension methods for interacting with <see cref="T:Microsoft.SemanticKernel.BinaryContent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.BinaryContentExtensions.WriteToFile(Microsoft.SemanticKernel.BinaryContent,System.String,System.Boolean)">
            <summary>
            Writes the content to a file.
            </summary>
            <param name="content">The content to write.</param>
            <param name="filePath">The path to the file to write to.</param>
            <param name="overwrite">Whether to overwrite the file if it already exists.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.StreamingMethodContent">
            <summary>
            Represents a manufactured streaming content from a single function result.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.StreamingMethodContent.Content">
            <summary>
            Gets the result of the function invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingMethodContent.ToByteArray">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingMethodContent.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.StreamingMethodContent.#ctor(System.Object,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.StreamingMethodContent"/> class.
            </summary>
            <param name="innerContent">Underlying object that represents the chunk content.</param>
            <param name="metadata">Additional metadata associated with the content.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchProvider">
            <summary>
            A component that does a search based on any messages that the AI model is invoked with and injects the results into the AI model invocation context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchProvider.#ctor(Microsoft.SemanticKernel.Data.ITextSearch,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.SemanticKernel.Data.TextSearchProviderOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchProvider"/> class.
            </summary>
            <param name="textSearch">The text search component to retrieve results from.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <param name="options">Options that configure the behavior of the component.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProvider.Options">
            <summary>
            Gets the options that have been configured for this component.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchProvider.ModelInvokingAsync(System.Collections.Generic.ICollection{Microsoft.Extensions.AI.ChatMessage},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchProvider.SearchAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Plugin method to search the database on demand.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchProvider.FormatResults(System.Collections.Generic.List{Microsoft.SemanticKernel.Data.TextSearchResult})">
            <summary>
            Format the results showing the content with source link and name for each result.
            </summary>
            <param name="results">The results to format.</param>
            <returns>The formatted results.</returns>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.TextSearchResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.ListTextSearchResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextRagSourceGenerationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchProviderOptions">
            <summary>
            Contains options for the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.Top">
            <summary>
            Maximum number of results to return from the similarity search.
            </summary>
            <remarks>The value must be greater than 0.</remarks>
            <value>The default value is 3 if not set.</value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.Filter">
            <summary>
            Gets or sets the filter expression to apply to the search query.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.SearchTime">
            <summary>
            Gets or sets the time at which the text search is performed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.PluginFunctionName">
            <summary>
            Gets or sets the name of the plugin method that will be made available for searching
            if the <see cref="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.SearchTime"/> option is set to <see cref="F:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.RagBehavior.OnDemandFunctionCalling"/>.
            </summary>
            <value>
            Defaults to &quot;Search&quot; if not set.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.PluginFunctionDescription">
            <summary>
            Gets or sets the description of the plugin method that will be made available for searching
            if the <see cref="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.SearchTime"/> option is set to <see cref="F:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.RagBehavior.OnDemandFunctionCalling"/>.
            </summary>
            <value>
            Defaults to &quot;Allows searching for additional information to help answer the user question.&quot; if not set.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.ContextPrompt">
            <summary>
            When providing the text chunks to the AI model on invocation, this string is prefixed
            to those chunks, in order to provide some context to the model.
            </summary>
            <value>
            Defaults to &quot;Consider the following information from source documents when responding to the user:&quot;
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.IncludeCitationsPrompt">
            <summary>
            When providing the text chunks to the AI model on invocation, this string is postfixed
            to those chunks, in order to instruct the model to include citations.
            </summary>
            <value>
            Defaults to &quot;## Additional Context\nInclude citations to the source document with document name and link if document name and link is available.:&quot;
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.ContextFormatter">
            <summary>
            Optional delegate to override the default context creation implementation.
            </summary>
            <remarks>
            <para>
            If provided, this delegate will be used to do the following:
            1. Create the output context provided by the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchProvider"/> when invoking the AI model.
            2. Create the response text when invoking the component via a plugin.
            </para>
            <para>
            Note that the delegate should include the context prompt and the
            include citations prompt if they are required in the output.
            The <see cref="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.ContextPrompt"/> and <see cref="P:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.IncludeCitationsPrompt"/> settings
            will not be used if providing this delegate.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.RagBehavior">
            <summary>
            Choices for controlling the behavior of the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchProvider"/>.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.RagBehavior.BeforeAIInvoke">
            <summary>
            A search is performed each time that the model/agent is invoked just before invocation
            and the results are provided to the model/agent via the invocation context.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.TextSearchProviderOptions.RagBehavior.OnDemandFunctionCalling">
            <summary>
            A search may be performed by the model/agent on demand via function calling.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchDocument">
            <summary>
            Represents a document that can be used for Retrieval Augmented Generation (RAG).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchDocument.Namespaces">
            <summary>
            Gets or sets an optional list of namespaces that the document should belong to.
            </summary>
            <remarks>
            A namespace is a logical grouping of documents, e.g. may include a group id to scope the document to a specific group of users.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchDocument.Text">
            <summary>
            Gets or sets the content as text.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchDocument.SourceId">
            <summary>
            Gets or sets an optional source ID for the document.
            </summary>
            <remarks>
            This ID should be unique within the collection that the document is stored in, and can
            be used to map back to the source artifact for this document.
            If updates need to be made later or the source document was deleted and this document
            also needs to be deleted, this id can be used to find the document again.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchDocument.SourceName">
            <summary>
            Gets or sets an optional name for the source document.
            </summary>
            <remarks>
            This can be used to provide display names for citation links when the document is referenced as
            part of a response to a query.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchDocument.SourceLink">
            <summary>
            Gets or sets an optional link back to the source of the document.
            </summary>
            <remarks>
            This can be used to provide citation links when the document is referenced as
            part of a response to a query.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchStore`1">
            <summary>
            A class that allows for easy storage and retrieval of documents in a Vector Store for Retrieval Augmented Generation (RAG).
            </summary>
            <remarks>
            <para>
            This class provides an opinionated schema for storing documents in a vector store. It is valuable for simple scenarios
            where you want to store text + embedding, or a reference to an external document + embedding without needing to customize the schema.
            If you want to control the schema yourself, you can use an implementation of <see cref="T:Microsoft.Extensions.VectorData.VectorStoreCollection`2"/>
            with the <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> class instead.
            </para>
            <para>
            This class can also be used with the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchProvider"/> to easily add RAG capabilities to an Agent.
            </para>
            </remarks>
            <typeparam name="TKey">The key type to use with the vector store. Choose a key type supported by your chosen vector store type. Currently this class only supports string or Guid.</typeparam>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.AnyLanguageWordRegex">
            <remarks>
            Pattern:<br/>
            <code>\\p{L}+</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [\p{L}] atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.#ctor(Microsoft.Extensions.VectorData.VectorStore,System.String,System.Int32,Microsoft.SemanticKernel.Data.TextSearchStoreOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchStore`1"/> class.
            </summary>
            <param name="vectorStore">The vector store to store and read the memories from.</param>
            <param name="collectionName">The name of the collection in the vector store to store and read the memories from.</param>
            <param name="vectorDimensions">The number of dimensions to use for the memory embeddings.</param>
            <param name="options">Options to configure the behavior of this class.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the key type provided is not supported.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.UpsertTextAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Upserts a batch of text chunks into the vector store.
            </summary>
            <param name="textChunks">The text chunks to upload.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the documents have been upserted.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.UpsertDocumentsAsync(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Data.TextSearchDocument},Microsoft.SemanticKernel.Data.TextSearchStoreUpsertOptions,System.Threading.CancellationToken)">
            <summary>
            Upserts a batch of documents into the vector store.
            </summary>
            <param name="documents">The documents to upload.</param>
            <param name="options">Optional options to control the upsert behavior.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the documents have been upserted.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.SearchInternalAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Internal search implementation with hydration of id / link only storage.
            </summary>
            <param name="query">The text query to find similar documents to.</param>
            <param name="searchOptions">Search options.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The search results.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.EnsureCollectionExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Thread safe method to get the collection and ensure that it is created at least once.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The created collection.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.GenerateUniqueKey``1(System.String)">
            <summary>
            Generates a unique key for the RAG document.
            </summary>
            <param name="sourceId">Source id of the source document for this RAG document.</param>
            <typeparam name="TDocumentKey">The type of the key to use, since different databases require/support different keys.</typeparam>
            <returns>A new unique key.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the requested key type is not supported.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1">
            <summary>
            The data model to use for storing RAG documents in the vector store.
            </summary>
            <typeparam name="TDocumentKey">The type of the key to use, since different databases require/support different keys.</typeparam>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1.Key">
            <summary>
            Gets or sets a unique identifier for the memory document.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1.Namespaces">
            <summary>
            Gets or sets an optional list of namespaces that the document should belong to.
            </summary>
            <remarks>
            A namespace is a logical grouping of documents, e.g. may include a group id to scope the document to a specific group of users.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1.Text">
            <summary>
            Gets or sets the content as text.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1.SourceId">
            <summary>
            Gets or sets an optional source ID for the document.
            </summary>
            <remarks>
            This ID should be unique within the collection that the document is stored in, and can
            be used to map back to the source artifact for this document.
            If updates need to be made later or the source document was deleted and this document
            also needs to be deleted, this id can be used to find the document again.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1.SourceName">
            <summary>
            Gets or sets an optional name for the source document.
            </summary>
            <remarks>
            This can be used to provide display names for citation links when the document is referenced as
            part of a response to a query.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1.SourceLink">
            <summary>
            Gets or sets an optional link back to the source of the document.
            </summary>
            <remarks>
            This can be used to provide citation links when the document is referenced as
            part of a response to a query.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStore`1.TextRagStorageDocument`1.TextEmbedding">
            <summary>
            Gets or sets the text that will be used to generate the embedding for the document.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchStoreOptions">
            <summary>
            Contains options for the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchStore`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.SearchNamespace">
            <summary>
            Gets or sets an optional namespace to pre-filter the possible
            records with when doing a vector search.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.UseSourceIdAsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether to use the source ID as the primary key for records.
            </summary>
            <remarks>
            <para>
            Using the source ID as the primary key allows for easy updates from the source for any changed
            records, since those records can just be upserted again, and will overwrite the previous version
            of the same record.
            </para>
            <para>
            This setting can only be used when the chosen key type is a string.
            </para>
            </remarks>
            <value>
            Defaults to <c>false</c> if not set.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.UseHybridSearch">
            <summary>
            Gets or sets a value indicating whether to use hybrid search if it is available for the provided vector store.
            </summary>
            <value>
            Defaults to <c>true</c> if not set.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.WordSegementer">
            <summary>
            Gets or sets a word segmenter function to split search text into separate words for the purposes of hybrid search.
            This will not be used if <see cref="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.UseHybridSearch"/> is set to <c>false</c>.
            </summary>
            <remarks>
            Defaults to a simple text-character-based segmenter that splits the text by any character that is not a text character.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.SourceRetrievalCallback">
            <summary>
            Gets or sets an optional callback to load the source text using the source id or source link
            if the source text is not persisted in the database.
            </summary>
            <remarks>
            The response should include the source id or source link, as provided in the request,
            plus the source text loaded from the source.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalRequest">
            <summary>
            Represents a request to the <see cref="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.SourceRetrievalCallback"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalRequest.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalRequest"/> class.
            </summary>
            <param name="sourceId">The source ID of the document to retrieve.</param>
            <param name="sourceLink">The source link of the document to retrieve.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalRequest.SourceId">
            <summary>
            Gets or sets the source ID of the document to retrieve.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalRequest.SourceLink">
            <summary>
            Gets or sets the source link of the document to retrieve.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalResponse">
            <summary>
            Represents a response from the <see cref="P:Microsoft.SemanticKernel.Data.TextSearchStoreOptions.SourceRetrievalCallback"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalResponse.#ctor(Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalRequest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalResponse"/> class.
            </summary>
            <param name="request">The request matching this response.</param>
            <param name="text">The source text that was retrieved.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalResponse.SourceId">
            <summary>
            Gets or sets the source ID of the document that was retrieved.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalResponse.SourceLink">
            <summary>
            Gets or sets the source link of the document that was retrieved.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreSourceRetrievalResponse.Text">
            <summary>
            Gets or sets the source text of the document that was retrieved.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchStoreUpsertOptions">
            <summary>
            Contains options for <see cref="M:Microsoft.SemanticKernel.Data.TextSearchStore`1.UpsertDocumentsAsync(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.Data.TextSearchDocument},Microsoft.SemanticKernel.Data.TextSearchStoreUpsertOptions,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Data.TextSearchStoreUpsertOptions.PersistSourceText">
            <summary>
            Gets or sets a value indicating whether the source text should be persisted in the database.
            </summary>
            <value>
            Defaults to <see langword="true"/> if not set.
            </value>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchExtensions">
            <summary>
            Provides extension methods for interacting with <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateWithSearch(Microsoft.SemanticKernel.Data.ITextSearch,System.String,System.String)">
            <summary>
            Creates a plugin from an ITextSearch implementation.
            </summary>
            <remarks>
            The plugin will have a single function called `Search` which
            will return a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </remarks>
            <param name="textSearch">The instance of ITextSearch to be used by the plugin.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateWithSearch(Microsoft.SemanticKernel.Data.ITextSearch,System.String,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>
            Creates a plugin from an ITextSearch implementation.
            </summary>
            <remarks>
            The plugin will have a single function called `Search` which
            will return a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </remarks>
            <param name="textSearch">The instance of ITextSearch to be used by the plugin.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="description">A description of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateWithGetTextSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,System.String,System.String)">
            <summary>
            Creates a plugin from an ITextSearch implementation.
            </summary>
            <remarks>
            The plugin will have a single function called `GetSearchResults` which
            will return a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </remarks>
            <param name="textSearch">The instance of ITextSearch to be used by the plugin.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> instance with a GetTextSearchResults operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateWithGetTextSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,System.String,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>
            Creates a plugin from an ITextSearch implementation.
            </summary>
            <remarks>
            The plugin will have a single function called `GetSearchResults` which
            will return a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </remarks>
            <param name="textSearch">The instance of ITextSearch to be used by the plugin.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="description">A description of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> instance with a GetTextSearchResults operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateWithGetSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,System.String,System.String)">
            <summary>
            Creates a plugin from an ITextSearch implementation.
            </summary>
            <remarks>
            The plugin will have a single function called `GetSearchResults` which
            will return a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </remarks>
            <param name="textSearch">The instance of ITextSearch to be used by the plugin.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> instance with a GetSearchResults operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateWithGetSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,System.String,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>
            Creates a plugin from an ITextSearch implementation.
            </summary>
            <remarks>
            The plugin will have a single function called `GetSearchResults` which
            will return a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </remarks>
            <param name="textSearch">The instance of ITextSearch to be used by the plugin.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="description">A description of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> instance with a GetSearchResults operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateSearch(Microsoft.SemanticKernel.Data.ITextSearch,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions,Microsoft.SemanticKernel.Data.TextSearchOptions)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> which invokes <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="textSearch">The ITextSearch instance to use.</param>
            <param name="options">Optional KernelFunctionFromMethodOptions which allow the KernelFunction metadata to be specified.</param>
            <param name="searchOptions">Optional TextSearchOptions which override the options provided when the function is invoked.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateSearch(Microsoft.SemanticKernel.Data.ITextSearch,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions,Microsoft.SemanticKernel.Data.TextSearchOptions)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> which invokes <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="textSearch">The ITextSearch instance to use.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="options">Optional KernelFunctionFromMethodOptions which allow the KernelFunction metadata to be specified.</param>
            <param name="searchOptions">Optional TextSearchOptions which override the options provided when the function is invoked.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateGetTextSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions,Microsoft.SemanticKernel.Data.TextSearchOptions)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> which invokes <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="textSearch">The ITextSearch instance to use.</param>
            <param name="options">Optional KernelFunctionFromMethodOptions which allow the KernelFunction metadata to be specified.</param>
            <param name="searchOptions">Optional TextSearchOptions which override the options provided when the function is invoked.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateGetTextSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions,Microsoft.SemanticKernel.Data.TextSearchOptions)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> which invokes <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="textSearch">The ITextSearch instance to use.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="options">Optional KernelFunctionFromMethodOptions which allow the KernelFunction metadata to be specified.</param>
            <param name="searchOptions">Optional TextSearchOptions which override the options provided when the function is invoked.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateGetSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions,Microsoft.SemanticKernel.Data.TextSearchOptions)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> which invokes <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="textSearch">The ITextSearch instance to use.</param>
            <param name="options">Optional KernelFunctionFromMethodOptions which allow the KernelFunction metadata to be specified.</param>
            <param name="searchOptions">Optional TextSearchOptions which override the options provided when the function is invoked.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateGetSearchResults(Microsoft.SemanticKernel.Data.ITextSearch,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions,Microsoft.SemanticKernel.Data.TextSearchOptions)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> which invokes <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="textSearch">The ITextSearch instance to use.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="options">Optional KernelFunctionFromMethodOptions which allow the KernelFunction metadata to be specified.</param>
            <param name="searchOptions">Optional TextSearchOptions which override the options provided when the function is invoked.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance with a Search operation that calls the provided <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.DefaultSearchMethodOptions">
            <summary>
            Create the default <see cref="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions"/> for <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.DefaultSearchMethodOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create the default <see cref="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions"/> for <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> used for generating JSON schema for method parameters and return type.</param>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.DefaultGetTextSearchResultsMethodOptions">
            <summary>
            Create the default <see cref="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions"/> for <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.DefaultGetTextSearchResultsMethodOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create the default <see cref="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions"/> for <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> used for generating JSON schema for method parameters and return type.</param>
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.DefaultGetSearchResultsMethodOptions">
            <summary>
            Create the default <see cref="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions"/> for <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.DefaultGetSearchResultsMethodOptions(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Create the default <see cref="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions"/> for <see cref="M:Microsoft.SemanticKernel.Data.ITextSearch.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> used for generating JSON schema for method parameters and return type.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchExtensions.CreateBasicFilter(Microsoft.SemanticKernel.KernelFunctionFromMethodOptions,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Create a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchFilter" /> for the search based on any additional parameters included in the <see cref="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions"/>
            </summary>
            <param name="options">Kernel function method options.</param>
            <param name="arguments">Kernel arguments.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader">
            <summary>
            Contains helpers for reading <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult" /> attributes.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader._dataModelType">
            <summary>The <see cref="T:System.Type"/> of the data model.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader._nameProperty">
            <summary>The <see cref="T:System.Reflection.PropertyInfo"/> of the name property.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader._valueProperty">
            <summary>The <see cref="T:System.Reflection.PropertyInfo"/> of the value property.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader._linkProperty">
            <summary>The <see cref="T:System.Reflection.PropertyInfo"/> of the link property.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader"/>.
            </summary>
            <param name="dataModelType">Type of the data model.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader.GetName(System.Object)">
            <summary>
            Get the name property value of the data model.
            </summary>
            <param name="dataModel">The data model instance.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader.GetValue(System.Object)">
            <summary>
            Get the value property value of the data model.
            </summary>
            <param name="dataModel">The data model instance.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader.GetLink(System.Object)">
            <summary>
            Get the link property value of the data model.
            </summary>
            <param name="dataModel">The data model instance.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.TextSearchResultPropertyReader.FindPropertiesInfo(System.Type)">
            <summary>
            Find the properties with <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResultNameAttribute"/>, <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResultValueAttribute"/> and <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResultLinkAttribute"/> attributes
            </summary>
            <param name="type">The data model to find the properties on.</param>
            <returns>The properties.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1">
            <summary>
            A Vector Store Text Search implementation that can be used to perform searches using a <see cref="T:Microsoft.Extensions.VectorData.VectorStoreCollection`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.#ctor(Microsoft.Extensions.VectorData.IVectorSearchable{`0},Microsoft.Extensions.AI.IEmbeddingGenerator{System.String,Microsoft.Extensions.AI.Embedding{System.Single}},Microsoft.SemanticKernel.Data.MapFromResultToString,Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> with the
            provided <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> for performing searches and
            <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator"/> for generating vectors from the text search query.
            </summary>
            <param name="vectorSearchable"><see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> instance used to perform the search.</param>
            <param name="embeddingGenerator"><see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator"/> instance used to create a vector from the text query. Only FLOAT32 vector generation is currently supported by <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/>. If you required a different type of vector use the built in vector generation in the vector store.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.MapFromResultToString" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.#ctor(Microsoft.Extensions.VectorData.IVectorSearchable{`0},Microsoft.Extensions.AI.IEmbeddingGenerator{System.String,Microsoft.Extensions.AI.Embedding{System.Single}},Microsoft.SemanticKernel.Data.ITextSearchStringMapper,Microsoft.SemanticKernel.Data.ITextSearchResultMapper,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> with the
            provided <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> for performing searches and
            <see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator"/> for generating vectors from the text search query.
            </summary>
            <param name="vectorSearchable"><see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> instance used to perform the search.</param>
            <param name="embeddingGenerator"><see cref="T:Microsoft.Extensions.AI.IEmbeddingGenerator"/> instance used to create a vector from the text query. Only FLOAT32 vector generation is currently supported by <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/>. If you required a different type of vector use the built in vector generation in the vector store.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.#ctor(Microsoft.Extensions.VectorData.IVectorSearchable{`0},Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService,Microsoft.SemanticKernel.Data.MapFromResultToString,Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> with the
            provided <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> for performing searches and
            <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> for generating vectors from the text search query.
            </summary>
            <param name="vectorSearchable"><see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> instance used to perform the search.</param>
            <param name="textEmbeddingGeneration"><see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> instance used to create a vector from the text query.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.MapFromResultToString" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.#ctor(Microsoft.Extensions.VectorData.IVectorSearchable{`0},Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService,Microsoft.SemanticKernel.Data.ITextSearchStringMapper,Microsoft.SemanticKernel.Data.ITextSearchResultMapper,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> with the
            provided <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> for performing searches and
            <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> for generating vectors from the text search query.
            </summary>
            <param name="vectorSearchable"><see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> instance used to perform the search.</param>
            <param name="textEmbeddingGeneration"><see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> instance used to create a vector from the text query.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.#ctor(Microsoft.Extensions.VectorData.IVectorSearchable{`0},Microsoft.SemanticKernel.Data.MapFromResultToString,Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> with the
            provided <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> for performing searches and
            <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> for generating vectors from the text search query.
            </summary>
            <param name="vectorSearchable"><see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> instance used to perform the text search.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.MapFromResultToString" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.MapFromResultToTextSearchResult" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.#ctor(Microsoft.Extensions.VectorData.IVectorSearchable{`0},Microsoft.SemanticKernel.Data.ITextSearchStringMapper,Microsoft.SemanticKernel.Data.ITextSearchResultMapper,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions)">
            <summary>
            Create an instance of the <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> with the
            provided <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> for performing searches and
            <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> for generating vectors from the text search query.
            </summary>
            <param name="vectorSearchable"><see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> instance used to perform the text search.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.SearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.GetTextSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.GetSearchResultsAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.CreateTextSearchResultMapper">
            <summary>
            Result mapper which converts a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.CreateTextSearchStringMapper">
            <summary>
            Result mapper which converts a TRecord to a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.ExecuteVectorSearchAsync(System.String,Microsoft.SemanticKernel.Data.TextSearchOptions,System.Threading.CancellationToken)">
            <summary>
            Execute a vector search and return the results.
            </summary>
            <param name="query">What to search for.</param>
            <param name="searchOptions">Search options.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.GetResultsAsRecordAsync(System.Collections.Generic.IAsyncEnumerable{Microsoft.Extensions.VectorData.VectorSearchResult{`0}},System.Threading.CancellationToken)">
            <summary>
            Return the search results as instances of TRecord.
            </summary>
            <param name="searchResponse">Response containing the web pages matching the query.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.GetResultsAsTextSearchResultAsync(System.Collections.Generic.IAsyncEnumerable{Microsoft.Extensions.VectorData.VectorSearchResult{`0}},System.Threading.CancellationToken)">
            <summary>
            Return the search results as instances of <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/>.
            </summary>
            <param name="searchResponse">Response containing the web pages matching the query.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1.GetResultsAsStringAsync(System.Collections.Generic.IAsyncEnumerable{Microsoft.Extensions.VectorData.VectorSearchResult{`0}},System.Threading.CancellationToken)">
            <summary>
            Return the search results as instances of <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/>.
            </summary>
            <param name="searchResponse">Response containing the web pages matching the query.</param>
            <param name="cancellationToken">Cancellation token</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions">
            <summary>
            Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/>.
            At the moment this is empty but it is being included for future use.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextSearchKernelBuilderExtensions">
            <summary>
            Extension methods to register <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/> for use with <see cref="T:Microsoft.SemanticKernel.KernelBuilder"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextSearchKernelBuilderExtensions.AddVectorStoreTextSearch``1(Microsoft.SemanticKernel.IKernelBuilder,Microsoft.SemanticKernel.Data.ITextSearchStringMapper,Microsoft.SemanticKernel.Data.ITextSearchResultMapper,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions,System.String)">
            <summary>
            Register a <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> instance with the specified service ID.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.SemanticKernel.IKernelBuilder"/> to register the <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/> on.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
            <param name="serviceId">An optional service id to use as the service key.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.TextSearchServiceCollectionExtensions">
            <summary>
            Extension methods to register <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/> for use with <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextSearchServiceCollectionExtensions.AddVectorStoreTextSearch``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.SemanticKernel.Data.ITextSearchStringMapper,Microsoft.SemanticKernel.Data.ITextSearchResultMapper,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions,System.String)">
            <summary>
            Register a <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> instance with the specified service ID.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/> on.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
            <param name="serviceId">An optional service id to use as the service key.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextSearchServiceCollectionExtensions.AddVectorStoreTextSearch``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.SemanticKernel.Data.ITextSearchStringMapper,Microsoft.SemanticKernel.Data.ITextSearchResultMapper,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions,System.String)">
            <summary>
            Register a <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> instance with the specified service ID.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/> on.</param>
            <param name="vectorSearchableServiceId">Service id of the <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> to use.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
            <param name="serviceId">An optional service id to use as the service key.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.TextSearchServiceCollectionExtensions.AddVectorStoreTextSearch``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,Microsoft.SemanticKernel.Data.ITextSearchStringMapper,Microsoft.SemanticKernel.Data.ITextSearchResultMapper,Microsoft.SemanticKernel.Data.VectorStoreTextSearchOptions,System.String)">
            <summary>
            Register a <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/> instance with the specified service ID.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to register the <see cref="T:Microsoft.SemanticKernel.Data.ITextSearch"/> on.</param>
            <param name="vectorSearchServiceId">Service id of the <see cref="T:Microsoft.Extensions.VectorData.IVectorSearchable`1"/> to use.</param>
            <param name="textEmbeddingGenerationServiceId">Service id of the <see cref="T:Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService"/> to use.</param>
            <param name="stringMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchStringMapper" /> instance that can map a TRecord to a <see cref="T:System.String"/></param>
            <param name="resultMapper"><see cref="T:Microsoft.SemanticKernel.Data.ITextSearchResultMapper" /> instance that can map a TRecord to a <see cref="T:Microsoft.SemanticKernel.Data.TextSearchResult"/></param>
            <param name="options">Options used to construct an instance of <see cref="T:Microsoft.SemanticKernel.Data.VectorStoreTextSearch`1"/></param>
            <param name="serviceId">An optional service id to use as the service key.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Functions.ContextualFunctionProvider">
            <summary>
            Represents a contextual function provider that performs RAG (Retrieval-Augmented Generation) on the provided functions to identify
            the most relevant functions for the current context. The provider vectorizes the provided function names and descriptions
            and stores them in the specified vector store, allowing for a vector search to find the most relevant
            functions for a given context and provide the functions to the AI model/agent.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            The provider is designed to work with in-memory vector stores. Using other vector stores
            will require the data synchronization and data lifetime management to be done by the caller.
            </item>
            <item>
            The in-memory vector store is supposed to be created per provider and not shared between providers
            unless each provider uses a different collection name. Not following this may lead to a situation
            where one provider identifies a function belonging to another provider as relevant and, as a result,
            an attempt to access it by the first provider will fail because the function is not registered with it.
            </item>
            <item>
            The provider uses function name as a key for the records and as such the specified vector store
            should support record keys of string type.
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.ContextualFunctionProvider.#ctor(Microsoft.Extensions.VectorData.VectorStore,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.AIFunction},System.Int32,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.SemanticKernel.Functions.ContextualFunctionProviderOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Functions.ContextualFunctionProvider"/> class.
            </summary>
            <param name="vectorStore">An instance of a vector store.</param>
            <param name="vectorDimensions">The number of dimensions to use for the memory embeddings.</param>
            <param name="functions">The functions to vectorize and store for searching related functions.</param>
            <param name="maxNumberOfFunctions">The maximum number of relevant functions to retrieve from the vector store.</param>
            <param name="loggerFactory">The logger factory to use for logging. If not provided, no logging will be performed.</param>
            <param name="options">The provider options.</param>
            <param name="collectionName">The collection name to use for storing and retrieving functions.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.ContextualFunctionProvider.ModelInvokingAsync(System.Collections.Generic.ICollection{Microsoft.Extensions.AI.ChatMessage},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.ContextualFunctionProvider.MessageAddingAsync(System.String,Microsoft.Extensions.AI.ChatMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.ContextualFunctionProvider.BuildContextAsync(System.Collections.Generic.ICollection{Microsoft.Extensions.AI.ChatMessage},System.Threading.CancellationToken)">
            <summary>
            Builds the context from chat messages.
            </summary>
            <param name="newMessages">The new messages.</param>
            <param name="cancellationToken">The cancellation token to use for cancellation.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Functions.ContextualFunctionProviderOptions">
            <summary>
            Options for the <see cref="T:Microsoft.SemanticKernel.Functions.ContextualFunctionProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Functions.ContextualFunctionProviderOptions.NumberOfRecentMessagesInContext">
            <summary>
            The number of recent messages(messages from previous model/agent invocations) the provider uses to form a context.
            The provider collects all messages from all model/agent invocations, up to this number,
            and prepends them to the new messages of the current model/agent invocation to build a context.
            While collecting new messages, the provider will remove the oldest messages
            to keep the number of recent messages within the specified limit.
            </summary>
            <remarks>
            Using the recent messages together with the new messages can be very useful
            in cases where the model/agent is prompted to perform a task that requires details from
            previous invocation(s). For example, if the agent is asked to provision an Azure resource in the first
            invocation and deploy the resource in the second invocation, the second invocation will need
            information about the provisioned resource in the first invocation to deploy it.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Functions.ContextualFunctionProviderOptions.ContextEmbeddingValueProvider">
            <summary>
            A callback function that returns a value used to create a context embedding. The value is vectorized,
            and the resulting vector is used to perform vector searches for functions relevant to the context.
            If not provided, the default behavior is to concatenate the non-empty messages into a single string,
            separated by a new line.
            </summary>
            <remarks>
            The callback receives three parameters:
            `recentMessages` - messages from the previous model/agent invocations.
            `newMessages` - the new messages of the current model/agent invocation.
            `cancellationToken` - a cancellation token that can be used to cancel the operation.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Functions.ContextualFunctionProviderOptions.EmbeddingValueProvider">
            <summary>
            A callback function that returns a value used to create a function embedding. The value is vectorized,
            and the resulting vector is stored in the vector store for use in vector searches for functions relevant
            to the context.
            If not provided, the default behavior is to concatenate the function name and description into a single string.
            </summary>
            <remarks>
            The callback receives two parameters:
            `function` - the function to get embedding value for.
            `cancellationToken` - a cancellation token that can be used to cancel the operation.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.Functions.FunctionStore">
            <summary>
            Represents a vector store for <see cref="T:Microsoft.Extensions.AI.AIFunction"/> objects where the function name and description can be used for similarity searches.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.FunctionStore.#ctor(Microsoft.Extensions.VectorData.VectorStore,System.String,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.AIFunction},System.Int32,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.SemanticKernel.Functions.FunctionStoreOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Functions.FunctionStore"/> class.
            </summary>
            <param name="vectorStore">The vector store to use for storing functions.</param>
            <param name="collectionName">The name of the collection to use for storing and retrieving functions.</param>
            <param name="vectorDimensions">The number of dimensions to use for the memory embeddings.</param>
            <param name="functions">The functions to vectorize and store for searching related functions.</param>
            <param name="maxNumberOfFunctions">The maximum number of relevant functions to retrieve from the vector store.</param>
            <param name="loggerFactory">The logger factory to use for logging. If not provided, no logging will be performed.</param>
            <param name="options">The options to use for the function store.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.FunctionStore.SaveAsync(System.Threading.CancellationToken)">
            <summary>
            Saves the functions to the vector store.
            </summary>
            <param name="cancellationToken">The cancellation token to use for cancellation.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.FunctionStore.SearchAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Searches for functions based on the provided context.
            </summary>
            <param name="context">The context to search for functions.</param>
            <param name="cancellationToken">The cancellation token to use for cancellation.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.FunctionStore.GetFunctionsVectorizationInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get the function vectorization information, which includes the function name and the source used for vectorization.
            </summary>
            <param name="cancellationToken">The cancellation token to use for cancellation.</param>
            <returns>The function name and vectorization source pairs.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Functions.FunctionStore.AssertCollectionExistsAsync(System.Threading.CancellationToken)">
            <summary>
            Asserts that the collection exists in the vector store.
            </summary>
            <param name="cancellationToken">The cancellation token to use for cancellation.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Functions.FunctionStoreOptions">
            <summary>
            Options for the <see cref="T:Microsoft.SemanticKernel.Functions.FunctionStore"/>
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Functions.FunctionStoreOptions.EmbeddingValueProvider">
            <summary>
            A callback function that returns a value used to create a function embedding. The value is vectorized,
            and the resulting vector is stored in the vector store for use in vector searches for functions relevant
            to the context.
            If not provided, the default behavior is to concatenate the function name and description into a single string.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.DefaultKernelPlugin">
            <summary>
            Provides an <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> implementation around a collection of functions.
            </summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.DefaultKernelPlugin._functions">
            <summary>The collection of functions associated with this plugin.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.DefaultKernelPlugin.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Initializes the new plugin from the provided name, description, and function collection.</summary>
            <param name="name">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="P:Microsoft.SemanticKernel.DefaultKernelPlugin.FunctionCount">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.DefaultKernelPlugin.TryGetFunction(System.String,Microsoft.SemanticKernel.KernelFunction@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.DefaultKernelPlugin.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionFactory">
            <summary>
            Provides factory methods for creating commonly-used implementations of <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>, such as
            those backed by a prompt to be submitted to an LLM or those backed by a .NET method.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Delegate,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via a delegate.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Delegate,System.Text.Json.JsonSerializerOptions,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via a delegate.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Delegate,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via a delegate.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Delegate,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via a delegate.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Reflection.MethodInfo,System.Object,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to ones derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions,System.Object,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to ones derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Reflection.MethodInfo,System.Object,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromMethod(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions,System.Object,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(System.String,Microsoft.SemanticKernel.PromptExecutionSettings,System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(System.String,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.PromptExecutionSettings,System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.PromptExecutionSettings},System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(System.String,System.Text.Json.JsonSerializerOptions,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.PromptExecutionSettings},System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template configuration.
            </summary>
            <param name="promptConfig">Configuration information describing the prompt.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptConfig"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(Microsoft.SemanticKernel.PromptTemplateConfig,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template configuration.
            </summary>
            <param name="promptConfig">Configuration information describing the prompt.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptConfig"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(Microsoft.SemanticKernel.IPromptTemplate,Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template and prompt template configuration.
            </summary>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="promptConfig">Configuration information describing the prompt.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateFromPrompt(Microsoft.SemanticKernel.IPromptTemplate,Microsoft.SemanticKernel.PromptTemplateConfig,System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template and prompt template configuration.
            </summary>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="promptConfig">Configuration information describing the prompt.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFactory.CreateSettingsDictionary(System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.PromptExecutionSettings})">
            <summary>
            Wraps the specified settings into a dictionary with the default service ID as the key.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionFromMethod">
            <summary>
            Provides factory methods for creating <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instances backed by a .NET method.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.Create(System.Reflection.MethodInfo,System.Object,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.Create(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions,System.Object,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.Create(System.Reflection.MethodInfo,System.Object,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.Create(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions,System.Object,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.CreateMetadata(System.Reflection.MethodInfo,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.CreateMetadata(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.CreateMetadata(System.Reflection.MethodInfo,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.CreateMetadata(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.KernelFunctionFromMethodOptions)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="options">Optional function creation options.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> wrapper for <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.InvokeCoreAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.InvokeStreamingCoreAsync``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.Clone(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionFromMethod.ImplementationFunc">
            <summary>Delegate used to invoke the underlying delegate.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>Gets whether a method has a known async return type.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.GetParameterMarshalerDelegate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo,System.Boolean@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Gets a delegate for handling the marshaling of a parameter.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.TryToDeserializeValue(System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Object@)">
            <summary>
            Tries to deserialize the given value into an object of the specified target type.
            </summary>
            <param name="value">The value to be deserialized.</param>
            <param name="targetType">The type of the object to deserialize the value into.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for deserialization.</param>
            <param name="deserializedValue">The deserialized object if the method succeeds; otherwise, null.</param>
            <returns>true if the value is successfully deserialized; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.GetReturnValueMarshalerDelegate(System.Reflection.MethodInfo)">
            <summary>
            Gets a delegate for handling the result value of a method, converting it into the <see cref="T:System.Threading.Tasks.Task`1"/> to return from the invocation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.Invoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>Invokes the MethodInfo with the specified target object and arguments.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.GetExceptionForInvalidSignature(System.Reflection.MethodInfo,System.String)">
            <summary>Gets an exception that can be thrown indicating an invalid signature.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.ThrowForInvalidSignatureIf(System.Boolean,System.Reflection.MethodInfo,System.String)">
            <summary>Throws an exception indicating an invalid KernelFunctionFactory signature if the specified condition is not met.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.GetConverter(System.Type)">
            <summary>
            Gets a converter for type to ty conversion. For example, string to int, string to Guid, double to int, CustomType to string, etc.
            </summary>
            <param name="targetType">Specifies the target type into which a source type should be converted.</param>
            <returns>The converter function if the target type is supported; otherwise, null.</returns>
            <remarks>
            The conversion function uses whatever TypeConverter is registered for the target type.
            Conversion is first attempted using the current culture, and if that fails, it tries again
            with the invariant culture. If both fail, an exception is thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.SanitizeMetadataName(System.String)">
            <summary>
            Remove characters from method name that are valid in metadata but invalid for SK.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromMethod.InvalidNameCharsRegex">
            <remarks>
            Pattern:<br/>
            <code>[^0-9A-Za-z_]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^0-9A-Z_a-z].<br/>
            </code>
            </remarks>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionFromMethod.s_parsers">
            <summary>Parser functions for converting strings to parameter types.</summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions">
            <summary>
            Optional options that can be provided when creating a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> from a method.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions.FunctionName">
            <summary>
            The name to use for the function. If null, it will default to one derived from the method represented by the passed <see cref="T:System.Delegate"/> or <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions.Description">
            <summary>
            The description to use for the function. If null, it will default to one derived from the passed <see cref="T:System.Delegate"/> or <see cref="T:System.Reflection.MethodInfo"/>, if possible
            (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions.Parameters">
            <summary>
            Optional parameter descriptions. If null, it will default to one derived from the passed <see cref="T:System.Delegate"/> or <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions.ReturnParameter">
            <summary>
            Optional return parameter description. If null, it will default to one derived from the passed <see cref="T:System.Delegate"/> or <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions.LoggerFactory">
            <summary>
            The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelFunctionFromMethodOptions.AdditionalMetadata">
            <summary>
            Optional metadata in addition to the named values already provided in other arguments.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionFromPrompt">
            <summary>
            A Semantic Kernel "Semantic" prompt function.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.Create(System.String,System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings},System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="promptTemplate">Prompt template for the function, defined using the <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat"/> template format.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">A name for the given function. The name can be referenced in templates and used by the pipeline planner.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">Optional format of the template. Must be provided if a prompt template factory is provided</param>
            <param name="promptTemplateFactory">Optional: Prompt template factory</param>
            <param name="promptTemplateConfig">Optional: Prompt template config</param>
            <param name="loggerFactory">Logger factory</param>
            <returns>A function ready to use</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.Create(System.String,System.Text.Json.JsonSerializerOptions,System.Collections.Generic.Dictionary{System.String,Microsoft.SemanticKernel.PromptExecutionSettings},System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="promptTemplate">Prompt template for the function, defined using the <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat"/> template format.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">A name for the given function. The name can be referenced in templates and used by the pipeline planner.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">Optional format of the template. Must be provided if a prompt template factory is provided</param>
            <param name="promptTemplateFactory">Optional: Prompt template factory</param>
            <param name="promptTemplateConfig">Optional: Prompt template config</param>
            <param name="loggerFactory">Logger factory</param>
            <returns>A function ready to use</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.Create(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template configuration.
            </summary>
            <param name="promptConfig">Prompt template configuration</param>
            <param name="promptTemplateFactory">Optional: Prompt template factory</param>
            <param name="loggerFactory">Logger factory</param>
            <returns>A function ready to use</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.Create(Microsoft.SemanticKernel.PromptTemplateConfig,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template configuration.
            </summary>
            <param name="promptConfig">Prompt template configuration</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="promptTemplateFactory">Optional: Prompt template factory</param>
            <param name="loggerFactory">Logger factory</param>
            <returns>A function ready to use</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.Create(Microsoft.SemanticKernel.IPromptTemplate,Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template and a prompt template configuration.
            </summary>
            <param name="promptTemplate">Prompt template for the function, defined using the <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat"/> template format.</param>
            <param name="promptConfig">Prompt template configuration.</param>
            <param name="loggerFactory">Logger factory</param>
            <returns>A function ready to use</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.Create(Microsoft.SemanticKernel.IPromptTemplate,Microsoft.SemanticKernel.PromptTemplateConfig,System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template and a prompt template configuration.
            </summary>
            <param name="promptTemplate">Prompt template for the function, defined using the <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat"/> template format.</param>
            <param name="promptConfig">Prompt template configuration.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="loggerFactory">Logger factory</param>
            <returns>A function ready to use</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.InvokeCoreAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.InvokeStreamingCoreAsync``1(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.Clone(System.String)">
            <inheritdoc/>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionFromPrompt.MeasurementModelTagName">
            <summary>The measurement tag name for the model used.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionFromPrompt.s_invocationTokenUsagePrompt">
            <summary><see cref="T:System.Diagnostics.Metrics.Counter`1"/> to record function invocation prompt token usage.</summary>
        </member>
        <member name="F:Microsoft.SemanticKernel.KernelFunctionFromPrompt.s_invocationTokenUsageCompletion">
            <summary><see cref="T:System.Diagnostics.Metrics.Counter`1"/> to record function invocation completion token usage.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.AddDefaultValues(Microsoft.SemanticKernel.KernelArguments)">
            <summary>Add default values to the arguments if an argument is not defined</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.CreateRandomFunctionName(System.String)">
            <summary>Create a random, valid function name.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.CaptureUsageDetails(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Captures usage details, including token information.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionFromPrompt.CaptureUsageDetails(System.String,Microsoft.Extensions.AI.UsageDetails,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Captures usage details, including token information.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelFunctionMetadataFactory">
            <summary>
            Provides factory methods for creating collections of <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/>, such as
            those backed by a prompt to be submitted to an LLM or those backed by a .NET method.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionMetadataFactory.CreateFromType(System.Type,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> enumeration for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
            <param name="instanceType">Specifies the type of the object to extract <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> for.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="instanceType"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelFunctionMetadataFactory.CreateFromType(System.Type,System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> enumeration for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
            <param name="instanceType">Specifies the type of the object to extract <see cref="T:Microsoft.SemanticKernel.KernelFunctionMetadata"/> for.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="instanceType"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPluginFactory">
            <summary>
            Provides static factory methods for creating commonly-used plugin implementations.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromType``1(System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/>.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <param name="serviceProvider">
            The <see cref="T:System.IServiceProvider"/> to use for resolving any required services, such as an <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>
            and any services required to satisfy a constructor on <typeparamref name="T"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromType``1(System.Text.Json.JsonSerializerOptions,System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/>.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <param name="serviceProvider">
            The <see cref="T:System.IServiceProvider"/> to use for resolving any required services, such as an <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>
            and any services required to satisfy a constructor on <typeparamref name="T"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromType(System.Type,System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps a new instance of the specified type <paramref name="instanceType"/>.</summary>
            <param name="instanceType">
            Specifies the type of the object to wrap.
            </param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the <paramref name="instanceType"/>.
            </param>
            <param name="serviceProvider">
            The <see cref="T:System.IServiceProvider"/> to use for resolving any required services, such as an <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>
            and any services required to satisfy a constructor on <paramref name="instanceType"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="instanceType"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromType(System.Type,System.Text.Json.JsonSerializerOptions,System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps a new instance of the specified type <paramref name="instanceType"/>.</summary>
            <param name="instanceType">
            Specifies the type of the object to wrap.
            </param>
            <param name="jsonSerializerOptions">
            The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.
            </param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the <paramref name="instanceType"/>.
            </param>
            <param name="serviceProvider">
            The <see cref="T:System.IServiceProvider"/> to use for resolving any required services, such as an <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>
            and any services required to satisfy a constructor on <paramref name="instanceType"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="instanceType"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromObject(System.Object,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>Creates a plugin that wraps the specified target object.</summary>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromObject``1(``0,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>Creates a plugin that wraps the specified target object.</summary>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromFunctions(System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Initializes the new plugin from the provided name and function collection.</summary>
            <param name="pluginName">The name for the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromFunctions(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Initializes the new plugin from the provided name, description, and function collection.</summary>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreatePluginName(System.Type)">
            <summary>Creates a name for a plugin based on its type name.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.CreateFromObjectInternal``1(``0,System.String,System.Text.Json.JsonSerializerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>Creates a plugin that wraps the specified target object.</summary>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods decorated with <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> will be included in the plugin.
            Attributed methods must all have different names; overloads are not supported.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPluginFactory.InvalidPluginNameCharactersRegex">
            <remarks>
            Pattern:<br/>
            <code>[^0-9A-Za-z_]</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [^0-9A-Z_a-z].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.PromptRenderingResult">
            <summary>
            Contains result after prompt rendering process.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelExtensions">
            <summary>Provides extension methods for interacting with <see cref="T:Microsoft.SemanticKernel.Kernel"/> and related types.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromMethod(Microsoft.SemanticKernel.Kernel,System.Delegate,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via a delegate.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromMethod(Microsoft.SemanticKernel.Kernel,System.Delegate,System.Text.Json.JsonSerializerOptions,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via a delegate.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromMethod(Microsoft.SemanticKernel.Kernel,System.Reflection.MethodInfo,System.Object,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromMethod(Microsoft.SemanticKernel.Kernel,System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions,System.Object,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelParameterMetadata},Microsoft.SemanticKernel.KernelReturnParameterMetadata)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> instance
            and an optional target object if the method is an instance method.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="method">The method to be represented via the created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="target">The target object for the <paramref name="method"/> if it represents an instance method. This should be null if and only if <paramref name="method"/> is a static method.</param>
            <param name="functionName">The name to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="description">The description to use for the function. If null, it will default to one derived from the method represented by <paramref name="method"/>, if possible (e.g. via a <see cref="T:System.ComponentModel.DescriptionAttribute"/> on the method).</param>
            <param name="parameters">Optional parameter descriptions. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <param name="returnParameter">Optional return parameter description. If null, it will default to one derived from the method represented by <paramref name="method"/>.</param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking <paramref name="method"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromPrompt(Microsoft.SemanticKernel.Kernel,System.String,Microsoft.SemanticKernel.PromptExecutionSettings,System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromPrompt(Microsoft.SemanticKernel.Kernel,System.String,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.PromptExecutionSettings,System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="executionSettings">Default execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromPrompt(Microsoft.SemanticKernel.Kernel,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.PromptExecutionSettings},System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="executionSettings">List of execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromPrompt(Microsoft.SemanticKernel.Kernel,System.String,System.Text.Json.JsonSerializerOptions,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.PromptExecutionSettings},System.String,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="executionSettings">List of execution settings to use when invoking this prompt function.</param>
            <param name="functionName">The name to use for the function. If null, it will default to a randomly generated name.</param>
            <param name="description">The description to use for the function.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromPrompt(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template configuration.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptConfig">Configuration information describing the prompt.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptConfig"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreateFunctionFromPrompt(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.PromptTemplateConfig,System.Text.Json.JsonSerializerOptions,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> instance for a prompt specified via a prompt template configuration.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptConfig">Configuration information describing the prompt.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptConfig"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <returns>The created <see cref="T:Microsoft.SemanticKernel.KernelFunction"/> for invoking the prompt.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromType``1(Microsoft.SemanticKernel.Kernel,System.String)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/>.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromType``1(Microsoft.SemanticKernel.Kernel,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/>.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromObject(Microsoft.SemanticKernel.Kernel,System.Object,System.String)">
            <summary>Creates a plugin that wraps the specified target object.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromObject``1(Microsoft.SemanticKernel.Kernel,``0,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>Creates a plugin that wraps the specified target object.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromFunctions(Microsoft.SemanticKernel.Kernel,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that contains the specified functions.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromFunctions(Microsoft.SemanticKernel.Kernel,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that contains the specified functions.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromType``1(Microsoft.SemanticKernel.Kernel,System.String)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/> and imports it into the <paramref name="kernel"/>'s plugin collection.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromType``1(Microsoft.SemanticKernel.Kernel,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/> and imports it into the <paramref name="kernel"/>'s plugin collection.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromType``1(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.KernelPlugin},System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/> and adds it into the plugin collection.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <param name="serviceProvider">Service provider from which to resolve dependencies, such as <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromType``1(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.KernelPlugin},System.Text.Json.JsonSerializerOptions,System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/> and adds it into the plugin collection.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <param name="serviceProvider">Service provider from which to resolve dependencies, such as <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <typeparamref name="T"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromType``1(Microsoft.SemanticKernel.IKernelBuilderPlugins,System.String)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/> and adds it into the plugin collection.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromType``1(Microsoft.SemanticKernel.IKernelBuilderPlugins,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>Creates a plugin that wraps a new instance of the specified type <typeparamref name="T"/> and adds it into the plugin collection.</summary>
            <typeparam name="T">Specifies the type of the object to wrap.</typeparam>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <typeparamref name="T"/>.
            </param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.Add(Microsoft.SemanticKernel.IKernelBuilderPlugins,Microsoft.SemanticKernel.KernelPlugin)">
            <summary>Adds the <paramref name="plugin"/> to the <paramref name="plugins"/>.</summary>
            <param name="plugins">The plugin collection to which the plugin should be added.</param>
            <param name="plugin">The plugin to add.</param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromObject(Microsoft.SemanticKernel.Kernel,System.Object,System.String)">
            <summary>Creates a plugin that wraps the specified target object and imports it into the <paramref name="kernel"/>'s plugin collection.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromObject``1(Microsoft.SemanticKernel.Kernel,``0,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>Creates a plugin that wraps the specified target object and imports it into the <paramref name="kernel"/>'s plugin collection.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromObject(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.KernelPlugin},System.Object,System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps the specified target object and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <param name="serviceProvider">Service provider from which to resolve dependencies, such as <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromObject``1(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.KernelPlugin},``0,System.Text.Json.JsonSerializerOptions,System.String,System.IServiceProvider)">
            <summary>Creates a plugin that wraps the specified target object and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <param name="serviceProvider">Service provider from which to resolve dependencies, such as <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/>.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>s for all relevant members of <paramref name="target"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromObject(Microsoft.SemanticKernel.IKernelBuilderPlugins,System.Object,System.String)">
            <summary>Creates a plugin that wraps the specified target object and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromObject``1(Microsoft.SemanticKernel.IKernelBuilderPlugins,``0,System.Text.Json.JsonSerializerOptions,System.String)">
            <summary>Creates a plugin that wraps the specified target object and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="target">The instance of the class to be wrapped.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">
            Name of the plugin for function collection and prompt templates. If the value is null, a plugin name is derived from the type of the <paramref name="target"/>.
            </param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
            <remarks>
            Methods that have the <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute will be included in the plugin.
            See <see cref="T:Microsoft.SemanticKernel.KernelFunctionAttribute"/> attribute for details.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromFunctions(Microsoft.SemanticKernel.Kernel,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that contains the specified functions and imports it into the <paramref name="kernel"/>'s plugin collection.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromFunctions(Microsoft.SemanticKernel.Kernel,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that contains the specified functions and imports it into the <paramref name="kernel"/>'s plugin collection.</summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromFunctions(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.KernelPlugin},System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that contains the specified functions and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromFunctions(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.KernelPlugin},System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that contains the specified functions and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing the functions provided in <paramref name="functions"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromFunctions(Microsoft.SemanticKernel.IKernelBuilderPlugins,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that wraps the specified target object and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromFunctions(Microsoft.SemanticKernel.IKernelBuilderPlugins,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.SemanticKernel.KernelFunction})">
            <summary>Creates a plugin that wraps the specified target object and adds it into the plugin collection.</summary>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginName">The name for the plugin.</param>
            <param name="description">A description of the plugin.</param>
            <param name="functions">The initial functions to be available as part of the plugin.</param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="pluginName"/> is an invalid plugin name.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="functions"/> contains a null function.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="functions"/> contains two functions with the same name.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromPromptDirectory(Microsoft.SemanticKernel.Kernel,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>Creates a plugin containing one function per child directory of the specified <paramref name="pluginDirectory"/>.</summary>
            <remarks>
            <para>
            A plugin directory contains a set of subdirectories, one for each function in the form of a prompt.
            This method accepts the path of the plugin directory. Each subdirectory's name is used as the function name
            and may contain only alphanumeric chars and underscores.
            </para>
            <code>
            The following directory structure, with pluginDirectory = "D:\plugins\OfficePlugin",
            will create a plugin with three functions:
            D:\plugins\
                |__ OfficePlugin\                 # pluginDirectory
                    |__ ScheduleMeeting           #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ SummarizeEmailThread      #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ MergeWordAndExcelDocs     #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
            </code>
            <para>
            See https://github.com/microsoft/semantic-kernel/tree/main/prompt_template_samples for examples in the Semantic Kernel repository.
            </para>
            </remarks>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginDirectory">Path to the directory containing the plugin.</param>
            <param name="pluginName">The name of the plugin. If null, the name is derived from the <paramref name="pluginDirectory"/> directory name.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting discovered prompts into <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>s.
            If null, a default factory will be used.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing prompt functions created from the specified directory.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromPromptDirectory(Microsoft.SemanticKernel.Kernel,System.String,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>Creates a plugin containing one function per child directory of the specified <paramref name="pluginDirectory"/>.</summary>
            <remarks>
            <para>
            A plugin directory contains a set of subdirectories, one for each function in the form of a prompt.
            This method accepts the path of the plugin directory. Each subdirectory's name is used as the function name
            and may contain only alphanumeric chars and underscores.
            </para>
            <code>
            The following directory structure, with pluginDirectory = "D:\plugins\OfficePlugin",
            will create a plugin with three functions:
            D:\plugins\
                |__ OfficePlugin\                 # pluginDirectory
                    |__ ScheduleMeeting           #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ SummarizeEmailThread      #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ MergeWordAndExcelDocs     #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
            </code>
            <para>
            See https://github.com/microsoft/semantic-kernel/tree/main/prompt_template_samples for examples in the Semantic Kernel repository.
            </para>
            </remarks>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginDirectory">Path to the directory containing the plugin.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">The name of the plugin. If null, the name is derived from the <paramref name="pluginDirectory"/> directory name.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting discovered prompts into <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>s.
            If null, a default factory will be used.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing prompt functions created from the specified directory.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.CreatePluginFromPromptDirectory(System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,System.IServiceProvider,System.Text.Json.JsonSerializerOptions)">
            <summary>Creates a plugin containing one function per child directory of the specified <paramref name="pluginDirectory"/>.</summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromPromptDirectory(Microsoft.SemanticKernel.Kernel,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a plugin containing one function per child directory of the specified <paramref name="pluginDirectory"/>
            and imports it into the <paramref name="kernel"/>'s plugin collection.
            </summary>
            <remarks>
            <para>
            A plugin directory contains a set of subdirectories, one for each function in the form of a prompt.
            This method accepts the path of the plugin directory. Each subdirectory's name is used as the function name
            and may contain only alphanumeric chars and underscores.
            </para>
            <code>
            The following directory structure, with pluginDirectory = "D:\plugins\OfficePlugin",
            will create a plugin with three functions:
            D:\plugins\
                |__ OfficePlugin\                 # pluginDirectory
                    |__ ScheduleMeeting           #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ SummarizeEmailThread      #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ MergeWordAndExcelDocs     #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
            </code>
            <para>
            See https://github.com/microsoft/semantic-kernel/tree/main/prompt_template_samples for examples in the Semantic Kernel repository.
            </para>
            </remarks>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginDirectory">Path to the directory containing the plugin, e.g. "/myAppPlugins/StrategyPlugin"</param>
            <param name="pluginName">The name of the plugin. If null, the name is derived from the <paramref name="pluginDirectory"/> directory name.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting discovered prompts into <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>s.
            If null, a default factory will be used.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing prompt functions created from the specified directory.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.ImportPluginFromPromptDirectory(Microsoft.SemanticKernel.Kernel,System.String,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a plugin containing one function per child directory of the specified <paramref name="pluginDirectory"/>
            and imports it into the <paramref name="kernel"/>'s plugin collection.
            </summary>
            <remarks>
            <para>
            A plugin directory contains a set of subdirectories, one for each function in the form of a prompt.
            This method accepts the path of the plugin directory. Each subdirectory's name is used as the function name
            and may contain only alphanumeric chars and underscores.
            </para>
            <code>
            The following directory structure, with pluginDirectory = "D:\plugins\OfficePlugin",
            will create a plugin with three functions:
            D:\plugins\
                |__ OfficePlugin\                 # pluginDirectory
                    |__ ScheduleMeeting           #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ SummarizeEmailThread      #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ MergeWordAndExcelDocs     #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
            </code>
            <para>
            See https://github.com/microsoft/semantic-kernel/tree/main/prompt_template_samples for examples in the Semantic Kernel repository.
            </para>
            </remarks>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="pluginDirectory">Path to the directory containing the plugin, e.g. "/myAppPlugins/StrategyPlugin"</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">The name of the plugin. If null, the name is derived from the <paramref name="pluginDirectory"/> directory name.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting discovered prompts into <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>s.
            If null, a default factory will be used.
            </param>
            <returns>A <see cref="T:Microsoft.SemanticKernel.KernelPlugin"/> containing prompt functions created from the specified directory.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromPromptDirectory(Microsoft.SemanticKernel.IKernelBuilderPlugins,System.String,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a plugin containing one function per child directory of the specified <paramref name="pluginDirectory"/>
            and adds it into the plugin collection.
            </summary>
            <remarks>
            <para>
            A plugin directory contains a set of subdirectories, one for each function in the form of a prompt.
            This method accepts the path of the plugin directory. Each subdirectory's name is used as the function name
            and may contain only alphanumeric chars and underscores.
            </para>
            <code>
            The following directory structure, with pluginDirectory = "D:\plugins\OfficePlugin",
            will create a plugin with three functions:
            D:\plugins\
                |__ OfficePlugin\                 # pluginDirectory
                    |__ ScheduleMeeting           #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ SummarizeEmailThread      #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ MergeWordAndExcelDocs     #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
            </code>
            <para>
            See https://github.com/microsoft/semantic-kernel/tree/main/prompt_template_samples for examples in the Semantic Kernel repository.
            </para>
            </remarks>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginDirectory">Path to the directory containing the plugin, e.g. "/myAppPlugins/StrategyPlugin"</param>
            <param name="pluginName">The name of the plugin. If null, the name is derived from the <paramref name="pluginDirectory"/> directory name.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting discovered prompts into <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>s.
            If null, a default factory will be used.
            </param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.AddFromPromptDirectory(Microsoft.SemanticKernel.IKernelBuilderPlugins,System.String,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory)">
            <summary>
            Creates a plugin containing one function per child directory of the specified <paramref name="pluginDirectory"/>
            and adds it into the plugin collection.
            </summary>
            <remarks>
            <para>
            A plugin directory contains a set of subdirectories, one for each function in the form of a prompt.
            This method accepts the path of the plugin directory. Each subdirectory's name is used as the function name
            and may contain only alphanumeric chars and underscores.
            </para>
            <code>
            The following directory structure, with pluginDirectory = "D:\plugins\OfficePlugin",
            will create a plugin with three functions:
            D:\plugins\
                |__ OfficePlugin\                 # pluginDirectory
                    |__ ScheduleMeeting           #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ SummarizeEmailThread      #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
                    |__ MergeWordAndExcelDocs     #   function directory
                        |__ skprompt.txt          #     prompt template
                        |__ config.json           #     settings (optional file)
            </code>
            <para>
            See https://github.com/microsoft/semantic-kernel/tree/main/prompt_template_samples for examples in the Semantic Kernel repository.
            </para>
            </remarks>
            <param name="plugins">The plugin collection to which the new plugin should be added.</param>
            <param name="pluginDirectory">Path to the directory containing the plugin, e.g. "/myAppPlugins/StrategyPlugin"</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="pluginName">The name of the plugin. If null, the name is derived from the <paramref name="pluginDirectory"/> directory name.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting discovered prompts into <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>s.
            If null, a default factory will be used.
            </param>
            <returns>The same instance as <paramref name="plugins"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptAsync(Microsoft.SemanticKernel.Kernel,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunction">The function failed to invoke successfully.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptAsync(Microsoft.SemanticKernel.Kernel,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The result of the function's execution.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunction">The function failed to invoke successfully.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptAsync``1(Microsoft.SemanticKernel.Kernel,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template and returns the results of type <typeparamref name="T"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The <typeparamref name="T"/> of the function result value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunction">The function failed to invoke successfully.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptAsync``1(Microsoft.SemanticKernel.Kernel,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template and returns the results of type <typeparamref name="T"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The <typeparamref name="T"/> of the function result value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunction">The function failed to invoke successfully.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptAsync``1(Microsoft.SemanticKernel.Kernel,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig)">
            <summary>
            Invokes a prompt specified via a prompt template and returns the results of type <typeparamref name="T"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <returns>The <typeparamref name="T"/> of the function result value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunction">The function failed to invoke successfully.</exception>
            <exception cref="T:Microsoft.SemanticKernel.KernelFunctionCanceledException">The <see cref="T:Microsoft.SemanticKernel.KernelFunction"/>'s invocation was canceled.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptStreamingAsync(Microsoft.SemanticKernel.Kernel,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template and streams its results.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptStreamingAsync(Microsoft.SemanticKernel.Kernel,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template and streams its results.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptStreamingAsync``1(Microsoft.SemanticKernel.Kernel,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template and streams its results of type <typeparamref name="T"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.InvokePromptStreamingAsync``1(Microsoft.SemanticKernel.Kernel,System.Text.Json.JsonSerializerOptions,System.String,Microsoft.SemanticKernel.KernelArguments,System.String,Microsoft.SemanticKernel.IPromptTemplateFactory,Microsoft.SemanticKernel.PromptTemplateConfig,System.Threading.CancellationToken)">
            <summary>
            Invokes a prompt specified via a prompt template and streams its results of type <typeparamref name="T"/>.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="jsonSerializerOptions">The <see cref="T:System.Text.Json.JsonSerializerOptions"/> to use for serialization and deserialization of various aspects of the function.</param>
            <param name="promptTemplate">Prompt template for the function.</param>
            <param name="arguments">The arguments to pass to the function's invocation, including any <see cref="T:Microsoft.SemanticKernel.PromptExecutionSettings"/>.</param>
            <param name="templateFormat">The template format of <paramref name="promptTemplate"/>. This must be provided if <paramref name="promptTemplateFactory"/> is not null.</param>
            <param name="promptTemplateFactory">
            The <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> to use when interpreting the <paramref name="promptTemplate"/> into a <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            If null, a default factory will be used.
            </param>
            <param name="promptTemplateConfig">The prompt template config to use.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> for streaming the results of the function's invocation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTemplate"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="promptTemplate"/> is empty or composed entirely of whitespace.</exception>
            <remarks>
            The function will not be invoked until an enumerator is retrieved from the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            and its iteration initiated via an initial call to <see cref="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelExtensions.Build(Microsoft.SemanticKernel.IKernelBuilder)">
            <summary>Constructs a new instance of <see cref="T:Microsoft.SemanticKernel.Kernel"/> using all of the settings configured on the builder.</summary>
            <returns>The new <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance.</returns>
            <remarks>
            Every call to <see cref="M:Microsoft.SemanticKernel.KernelExtensions.Build(Microsoft.SemanticKernel.IKernelBuilder)"/> produces a new <see cref="T:Microsoft.SemanticKernel.Kernel"/> instance. The resulting <see cref="T:Microsoft.SemanticKernel.Kernel"/>
            instances will not share the same plugins collection or services provider (unless there are no services).
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.AIContextExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.ICollection`1"/> to add <see cref="T:Microsoft.SemanticKernel.AIContext"/> plugins.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.AIContextExtensions.AddFromAIContext(System.Collections.Generic.ICollection{Microsoft.SemanticKernel.KernelPlugin},Microsoft.SemanticKernel.AIContext,System.String)">
            <summary>
            Registers the <see cref="T:Microsoft.Extensions.AI.AIFunction"/> objects available on the provided <see cref="T:Microsoft.SemanticKernel.AIContext"/> as a plugin.
            </summary>
            <param name="plugins">The plugins collection to register the <see cref="T:Microsoft.Extensions.AI.AIFunction"/> objects on.</param>
            <param name="aiContext">The <see cref="T:Microsoft.SemanticKernel.AIContext"/> to get plugins from.</param>
            <param name="pluginName">The name to give to the plugin. This will be appended with _x where x is an ascending number, until a unique plugin name is found.</param>
            <returns>The chosen plugin name.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.Mem0Client">
            <summary>
            Client for the Mem0 memory service.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.Double">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.CreateMemoryMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.CreateMemoryMessageArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.CreateMemoryRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.SearchRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.SearchResponseItem">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.SearchResponseItemArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.DateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.NullableDateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0SourceGenerationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.Mem0Provider">
            <summary>
            A component that listens to messages added to the conversation thread, and automatically captures
            information about the user. It is also able to retrieve this information and add it to the AI invocation context.
            </summary>
            <remarks>
            <para>
            Mem0 allows memories to be stored under one or more optional scopes: application, agent, thread, and user.
            At least one scope must always be provided.
            </para>
            <para>
            There are some special considerations when using thread as a scope.
            A thread id may not be available at the time that this component is instantiated.
            It is therefore possible to provide no thread id when instantiating this class and instead set
            <see cref="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ScopeToPerOperationThreadId"/> to <see langword="true"/>.
            The component will then capture a thread id when a thread is created or when messages are received
            and use this thread id to scope the memories in mem0.
            </para>
            <para>
            Note that this component will keep the current thread id in a private field for the duration of
            the component's lifetime, and therefore using the component with multiple threads, with
            <see cref="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ScopeToPerOperationThreadId"/> set to <see langword="true"/> is not supported.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0Provider.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.SemanticKernel.Memory.Mem0ProviderOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Memory.Mem0Provider"/> class.
            </summary>
            <param name="httpClient">The HTTP client used for making requests.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <param name="options">Options for configuring the component.</param>
            <remarks>
            The base address of the required mem0 service, and any authentication headers, should be set on the <paramref name="httpClient"/>
            already, when passed as a parameter here. E.g.:
            <code>
            using var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri("https://api.mem0.ai");
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Token", "&lt;Your APIKey&gt;");
            new Mem0Client(httpClient);
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0Provider.ConversationCreatedAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0Provider.MessageAddingAsync(System.String,Microsoft.Extensions.AI.ChatMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0Provider.ModelInvokingAsync(System.Collections.Generic.ICollection{Microsoft.Extensions.AI.ChatMessage},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0Provider.ClearStoredMemoriesAsync">
            <summary>
            Plugin method to clear memories for the current agent/thread/user.
            </summary>
            <returns>A task that completes when the memory is cleared.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.Mem0Provider.ValidatePerOperationThreadId(System.String)">
            <summary>
            Validate that we are not receiving a new thread id when the component has already received one before.
            </summary>
            <param name="threadId">The new thread id.</param>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions">
            <summary>
            Options for the <see cref="T:Microsoft.SemanticKernel.Memory.Mem0Provider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ApplicationId">
            <summary>
            Gets or sets an optional ID for the application to scope memories to.
            </summary>
            <remarks>
            If not set, the scope of the memories will span all applications.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.AgentId">
            <summary>
            Gets or sets an optional ID for the agent to scope memories to.
            </summary>
            <remarks>
            If not set, the scope of the memories will span all agents.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ThreadId">
            <summary>
            Gets or sets an optional ID for the thread to scope memories to.
            </summary>
            <remarks>
            This value will be overridden by any thread id provided to the methods of the <see cref="T:Microsoft.SemanticKernel.Memory.Mem0Provider"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.UserId">
            <summary>
            Gets or sets an optional ID for the user to scope memories to.
            </summary>
            <remarks>
            If not set, the scope of the memories will span all users.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ScopeToPerOperationThreadId">
            <summary>
            Gets or sets a value indicating whether memories should be scoped to the thread id provided on a per operation basis.
            </summary>
            <remarks>
            This setting is useful if the thread id is not known when the <see cref="T:Microsoft.SemanticKernel.Memory.Mem0Provider"/> is instantiated, but
            per thread scoping is desired.
            If <see langword="false"/>, and <see cref="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ThreadId"/> is not set, there will be no per thread scoping.
            if <see langword="false"/>, and <see cref="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ThreadId"/> is set, <see cref="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ThreadId"/> will be used for scoping.
            If <see langword="true"/>, the thread id will be set to the thread id of the current operation, regardless of the value of <see cref="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ThreadId"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.Mem0ProviderOptions.ContextPrompt">
            <summary>
            When providing the memories found in Mem0 to the AI model on invocation, this string is prefixed
            to those memories, in order to provide some context to the model.
            </summary>
            <value>
            Defaults to &quot;## Memories\nConsider the following memories when answering user questions:&quot;
            </value>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.MemoryBuilder">
            <summary>
            A builder for Memory plugin.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.Build">
            <summary>
            Build a new instance of <see cref="T:Microsoft.SemanticKernel.Memory.ISemanticTextMemory"/> using the settings passed so far.
            </summary>
            <returns>Instance of <see cref="T:Microsoft.SemanticKernel.Memory.ISemanticTextMemory"/>.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.WithLoggerFactory(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Add a logger factory.
            </summary>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <returns>Updated Memory builder including the logger factory.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.WithHttpClient(System.Net.Http.HttpClient)">
            <summary>
            Add an HttpClient.
            </summary>
            <param name="httpClient"><see cref="T:System.Net.Http.HttpClient"/> to add.</param>
            <returns>Updated Memory builder including the client.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.WithMemoryStore(Microsoft.SemanticKernel.Memory.IMemoryStore)">
            <summary>
            Add memory store.
            </summary>
            <param name="store">Store to add.</param>
            <returns>Updated Memory builder including the memory store.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.WithMemoryStore``1(System.Func{Microsoft.Extensions.Logging.ILoggerFactory,``0})">
            <summary>
            Add memory store factory.
            </summary>
            <param name="factory">The store factory.</param>
            <returns>Updated Memory builder including the memory store.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.WithMemoryStore``1(System.Func{Microsoft.Extensions.Logging.ILoggerFactory,System.Net.Http.HttpClient,``0})">
            <summary>
            Add memory store factory.
            </summary>
            <param name="factory">The store factory.</param>
            <returns>Updated Memory builder including the memory store.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.WithTextEmbeddingGeneration(Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService)">
            <summary>
            Add text embedding generation.
            </summary>
            <param name="textEmbeddingGeneration">The text embedding generation.</param>
            <returns>Updated Memory builder including the text embedding generation.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.MemoryBuilder.WithTextEmbeddingGeneration``1(System.Func{Microsoft.Extensions.Logging.ILoggerFactory,System.Net.Http.HttpClient,``0})">
            <summary>
            Add text embedding generation.
            </summary>
            <param name="factory">The text embedding generation factory.</param>
            <returns>Updated Memory builder including the text embedding generation.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.SemanticTextMemory">
            <summary>
            Implementation of <see cref="T:Microsoft.SemanticKernel.Memory.ISemanticTextMemory"/>. Provides methods to save, retrieve, and search for text information
            in a semantic memory store.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.#ctor(Microsoft.SemanticKernel.Memory.IMemoryStore,Microsoft.SemanticKernel.Embeddings.ITextEmbeddingGenerationService)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Memory.SemanticTextMemory"/> class.
            </summary>
            <param name="storage">The memory store to use for storing and retrieving data.</param>
            <param name="embeddingGenerator">The text embedding generator to use for generating embeddings.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.#ctor(Microsoft.SemanticKernel.Memory.IMemoryStore,Microsoft.Extensions.AI.IEmbeddingGenerator{System.String,Microsoft.Extensions.AI.Embedding{System.Single}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Memory.SemanticTextMemory"/> class.
            </summary>
            <param name="storage">The memory store to use for storing and retrieving data.</param>
            <param name="embeddingGenerator">The text embedding generator to use for generating embeddings.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.SaveInformationAsync(System.String,System.String,System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.SaveReferenceAsync(System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.GetAsync(System.String,System.String,System.Boolean,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.RemoveAsync(System.String,System.String,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.SearchAsync(System.String,System.String,System.Int32,System.Double,System.Boolean,Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.SemanticTextMemory.GetCollectionsAsync(Microsoft.SemanticKernel.Kernel,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.WhiteboardProvider">
            <summary>
            An <see cref="T:Microsoft.SemanticKernel.AIContextProvider"/> that maintains a whiteboard during a conversation.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.WhiteboardProvider.#ctor(Microsoft.Extensions.AI.IChatClient,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.SemanticKernel.Memory.WhiteboardProviderOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.Memory.WhiteboardProvider"/> class.
            </summary>
            <param name="chatClient">A <see cref="T:Microsoft.Extensions.AI.IChatClient"/> to use for making chat completion calls.</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <param name="options">Options for configuring the provider.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProvider.CurrentWhiteboardContent">
            <summary>
            Gets the current whiteboard content.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.WhiteboardProvider.MessageAddingAsync(System.String,Microsoft.Extensions.AI.ChatMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.WhiteboardProvider.ModelInvokingAsync(System.Collections.Generic.ICollection{Microsoft.Extensions.AI.ChatMessage},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.WhiteboardProvider.WhenProcessingCompleteAsync">
            <summary>
            Wait for all messages to be processed and the whiteboard to be up to date.
            </summary>
            <returns>A task that completes when all messages are processed.</returns>
        </member>
        <member name="F:Microsoft.SemanticKernel.Memory.WhiteboardProvider.MaintenancePromptTemplate">
            <summary>
            Gets the prompt template to use for maintaining the whiteboard.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.WhiteboardProvider.BasicMessage">
            <summary>
            A simple message class that contains just the most basic msessage information
            that is required to pass to the LLM.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.WhiteboardProvider.NewWhiteboardResponse">
            <summary>
            Represents the response from the LLM when updating the whiteboard.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext">
            <summary>
            Source generated json serializer for <see cref="T:Microsoft.SemanticKernel.Memory.WhiteboardProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.BasicMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.NewWhiteboardResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.IEnumerableBasicMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.Memory.WhiteboardProviderSourceGenerationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.Memory.WhiteboardProviderOptions">
            <summary>
            Options for configuring the <see cref="T:Microsoft.SemanticKernel.Memory.WhiteboardProvider"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderOptions.MaxWhiteboardMessages">
            <summary>
            Gets or sets the maximum number of messages to keep on the whiteboard.
            </summary>
            <value>
            Defaults to 10 if not specified.
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderOptions.ContextPrompt">
            <summary>
            Gets or sets a string that is prefixed to the messages on the whiteboard,
            when providing them as context to the AI model.
            </summary>
            <value>
            Defaults to &quot;## Whiteboard\nThe following list of messages are currently on the whiteboard:&quot;
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderOptions.WhiteboardEmptyPrompt">
            <summary>
            Gets or sets the message to provide to the AI model when there are no messages on the whiteboard.
            </summary>
            <value>
            Defaults to &quot;## Whiteboard\nThe whiteboard is currently empty.&quot;
            </value>
        </member>
        <member name="P:Microsoft.SemanticKernel.Memory.WhiteboardProviderOptions.MaintenancePromptTemplate">
            <summary>
            Gets or sets a prompt template to use to update the whiteboard with the latest messages
            if the built-in prompt needs to be customized.
            </summary>
            <remarks>
            The following parameters can be used in the prompt:
            {{$maxWhiteboardMessages}}
            {{$inputMessages}}
            {{$currentWhiteboard}}
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.AggregatorPromptTemplateFactory">
            <summary>
            Provides a <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> which aggregates multiple prompt template factories.
            </summary>
            <remarks>
            Attempts via <see cref="M:Microsoft.SemanticKernel.AggregatorPromptTemplateFactory.TryCreate(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplate@)"/> to create an <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/> from a
            <see cref="T:Microsoft.SemanticKernel.PromptTemplateConfig"/> will iterate through the aggregated factories, using
            the result from the first to successfully handle the supplied configuration.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.AggregatorPromptTemplateFactory.#ctor(Microsoft.SemanticKernel.IPromptTemplateFactory[])">
            <summary>Initializes the instance.</summary>
            <param name="promptTemplateFactories">Ordered <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> instances to aggregate.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.AggregatorPromptTemplateFactory.TryCreate(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplate@)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.EchoPromptTemplate">
            <summary>
            Implementation of <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/> that just returns the prompt template.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.EchoPromptTemplate.#ctor(Microsoft.SemanticKernel.PromptTemplateConfig)">
            <summary>
            Constructor for <see cref="T:Microsoft.SemanticKernel.EchoPromptTemplate"/>.
            </summary>
            <param name="promptConfig">Prompt template configuration</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.EchoPromptTemplate.RenderAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.EchoPromptTemplateFactory">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> which creates no operation instances of <see cref="T:Microsoft.SemanticKernel.IPromptTemplate"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.EchoPromptTemplateFactory.Instance">
            <summary>
            Singleton instance of <see cref="T:Microsoft.SemanticKernel.EchoPromptTemplateFactory"/>.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.EchoPromptTemplateFactory.TryCreate(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplate@)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPromptTemplate">
            <summary>
            Given a prompt, that might contain references to variables and functions:
            - Get the list of references
            - Resolve each reference
              - Variable references are resolved using the context variables
              - Function references are resolved invoking those functions
                - Functions can be invoked passing in variables
                - Functions do not receive the context variables, unless specified using a special variable
                - Functions can be invoked in order and in parallel so the context variables must be immutable when invoked within the template
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPromptTemplate.#ctor(Microsoft.SemanticKernel.PromptTemplateConfig,System.Boolean,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor for <see cref="T:Microsoft.SemanticKernel.KernelPromptTemplate"/>.
            </summary>
            <param name="promptConfig">Prompt template configuration</param>
            <param name="allowDangerouslySetContent">Flag indicating whether to allow potentially dangerous content to be inserted into the prompt</param>
            <param name="loggerFactory">Logger factory</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPromptTemplate.RenderAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPromptTemplate.ExtractBlocks(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Given a prompt template string, extract all the blocks (text, variables, function calls)
            </summary>
            <returns>A list of all the blocks, ie the template tokenized in text, variables and function calls</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPromptTemplate.RenderAsync(System.Collections.Generic.List{Microsoft.SemanticKernel.TemplateEngine.Block},Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Given a list of blocks render each block and compose the final result.
            </summary>
            <param name="blocks">Template blocks generated by ExtractBlocks.</param>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The prompt template ready to be used for an AI request.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPromptTemplate.AddMissingInputVariables(System.Collections.Generic.List{Microsoft.SemanticKernel.TemplateEngine.Block},Microsoft.SemanticKernel.PromptTemplateConfig)">
            <summary>
            Augments <paramref name="config"/>'s <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.InputVariables"/> with any variables
            not already contained there but that are referenced in the prompt template.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.KernelPromptTemplateFactory">
            <summary>
            Provides an implementation of <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> for the <see cref="P:Microsoft.SemanticKernel.PromptTemplateConfig.SemanticKernelTemplateFormat"/> template format.
            </summary>
            <remarks>
            This is used as the default <see cref="T:Microsoft.SemanticKernel.IPromptTemplateFactory"/> when no other factory is provided.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.KernelPromptTemplateFactory.AllowDangerouslySetContent">
            <summary>
            Gets or sets a value indicating whether to allow potentially dangerous content to be inserted into the prompt.
            </summary>
            <remarks>
            The default is false.
            When set to true then all input content added to templates is treated as safe content.
            For prompts which are being used with a chat completion service this should be set to false to protect against prompt injection attacks.
            When using other AI services e.g. Text-To-Image this can be set to true to allow for more complex prompts.
            </remarks>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPromptTemplateFactory.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.KernelPromptTemplateFactory"/> class.
            </summary>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.KernelPromptTemplateFactory.TryCreate(Microsoft.SemanticKernel.PromptTemplateConfig,Microsoft.SemanticKernel.IPromptTemplate@)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.SemanticKernel.TemplateEngine.Block">
            <summary>
            Base class for blocks parsed from a prompt template
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.TemplateEngine.Block.Content">
            <summary>
            The block content
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.TemplateEngine.Block.Logger">
            <summary>
            App logger
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.Block.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Base constructor. Prevent external instantiation.
            </summary>
            <param name="content">Block content</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.Block.IsValid(System.String@)">
            <summary>
            Check if the block content is valid.
            </summary>
            <param name="errorMsg">Error message in case the content is not valid</param>
            <returns>True if the block content is valid</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.CodeBlock.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.TemplateEngine.CodeBlock"/> class.
            </summary>
            <param name="content">Block content</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.CodeBlock.#ctor(System.Collections.Generic.List{Microsoft.SemanticKernel.TemplateEngine.Block},System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.TemplateEngine.CodeBlock"/> class.
            </summary>
            <param name="tokens">A list of blocks</param>
            <param name="content">Block content</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="P:Microsoft.SemanticKernel.TemplateEngine.CodeBlock.Blocks">
            <summary>
            Gets the list of blocks.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.CodeBlock.IsValid(System.String@)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.CodeBlock.RenderCodeAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.CodeBlock.EnrichFunctionArguments(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.TemplateEngine.FunctionIdBlock,Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Adds function arguments. If the first argument is not a named argument, it is added to the arguments collection as the 'input' argument.
            Additionally, for the prompt expression - {{MyPlugin.MyFunction p1=$v1}}, the value of the v1 variable will be resolved from the original arguments collection.
            Then, the new argument, p1, will be added to the arguments.
            </summary>
            <param name="kernel">Kernel instance.</param>
            <param name="fBlock">Function block.</param>
            <param name="arguments">The prompt rendering arguments.</param>
            <returns>The function arguments.</returns>
            <exception cref="T:Microsoft.SemanticKernel.KernelException">Occurs when any argument other than the first is not a named argument.</exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.FunctionIdBlock.Render(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.FunctionIdBlock.ValidContentRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9_.]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [.0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.TemplateEngine.ICodeRendering">
            <summary>
            Interface of dynamic blocks that need async IO to be rendered.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.ICodeRendering.RenderCodeAsync(Microsoft.SemanticKernel.Kernel,Microsoft.SemanticKernel.KernelArguments,System.Threading.CancellationToken)">
            <summary>
            Render the block using the given context, potentially using external I/O.
            </summary>
            <param name="kernel">The <see cref="T:Microsoft.SemanticKernel.Kernel"/> containing services, plugins, and other state for use throughout the operation.</param>
            <param name="arguments">The arguments</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Rendered content</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TemplateEngine.ITextRendering">
            <summary>
            Interface of static blocks that don't need async IO to be rendered.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.ITextRendering.Render(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Render the block using only the given arguments.
            </summary>
            <param name="arguments">Optional arguments the block rendering</param>
            <returns>Rendered content</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock">
            <summary>
            A <see cref="T:Microsoft.SemanticKernel.TemplateEngine.Block"/> that represents a named argument for a function call.
            For example, in the template {{ MyPlugin.MyFunction var1="foo" }}, var1="foo" is a named arg block.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.Type">
            <summary>
            Returns the <see cref="T:Microsoft.SemanticKernel.TemplateEngine.BlockTypes"/>.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.Name">
            <summary>
            Gets the name of the function argument.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.VarBlock">
            <summary>
            VarBlock associated with this named argument.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock"/> class.
            </summary>
            <param name="text">Raw text parsed from the prompt template.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
            <exception cref="T:Microsoft.SemanticKernel.KernelException"></exception>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.TryGetNameAndValue(System.String,System.String@,System.String@)">
            <summary>
            Attempts to extract the name and value of a named argument block from a string
            </summary>
            <param name="text">String from which to extract a name and value</param>
            <param name="name">Name extracted from argument block, when successful. Empty string otherwise.</param>
            <param name="value">Value extracted from argument block, when successful. Empty string otherwise.</param>
            <returns>true when a name and value are successfully extracted from the given text, false otherwise</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.GetValue(Microsoft.SemanticKernel.KernelArguments)">
            <summary>
            Gets the rendered value of the function argument. If the value is a <see cref="T:Microsoft.SemanticKernel.TemplateEngine.ValBlock"/>, the value stays the same.
            If the value is a <see cref="P:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.VarBlock"/>, the value of the variable is determined by the arguments passed in.
            </summary>
            <param name="arguments">Arguments to use for rendering the named argument value when the value is a <see cref="P:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.VarBlock"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.Render(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock.IsValid(System.String@)">
            <summary>
            Returns whether the named arg block has valid syntax.
            </summary>
            <param name="errorMsg">An error message that gets set when the named arg block is not valid.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.TextBlock.Render(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.ValBlock.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create an instance
            </summary>
            <param name="quotedValue">Block content, including the delimiting chars</param>
            <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory"/> to use for logging. If null, no logging will be performed.</param>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.ValBlock.Render(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.VarBlock.Render(Microsoft.SemanticKernel.KernelArguments)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.VarBlock.ValidNameRegex">
            <remarks>
            Pattern:<br/>
            <code>^[a-zA-Z0-9_]*$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Z_a-z] atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.SemanticKernel.TemplateEngine.CodeTokenizer">
             <summary>
             Simple tokenizer used for default SK template code language.
            
             BNF parsed by TemplateTokenizer:
             [template]       ::= "" | [block] | [block] [template]
             [block]          ::= [sk-block] | [text-block]
             [sk-block]       ::= "{{" [variable] "}}" | "{{" [value] "}}" | "{{" [function-call] "}}"
             [text-block]     ::= [any-char] | [any-char] [text-block]
             [any-char]       ::= any char
            
             BNF parsed by CodeTokenizer:
             [template]       ::= "" | [variable] " " [template] | [value] " " [template] | [function-call] " " [template]
             [variable]       ::= "$" [valid-name]
             [value]          ::= "'" [text] "'" | '"' [text] '"'
             [function-call]  ::= [function-id] | [function-id] [parameter]
             [parameter]      ::= [variable] | [value]
            
             BNF parsed by dedicated blocks
             [function-id]    ::= [valid-name] | [valid-name] "." [valid-name]
             [valid-name]     ::= [valid-symbol] | [valid-symbol] [valid-name]
             [valid-symbol]   ::= [letter] | [digit] | "_"
             [letter]         ::= "a" | "b" ... | "z" | "A" | "B" ... | "Z"
             [digit]          ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
             </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.CodeTokenizer.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
             <summary>
             Simple tokenizer used for default SK template code language.
            
             BNF parsed by TemplateTokenizer:
             [template]       ::= "" | [block] | [block] [template]
             [block]          ::= [sk-block] | [text-block]
             [sk-block]       ::= "{{" [variable] "}}" | "{{" [value] "}}" | "{{" [function-call] "}}"
             [text-block]     ::= [any-char] | [any-char] [text-block]
             [any-char]       ::= any char
            
             BNF parsed by CodeTokenizer:
             [template]       ::= "" | [variable] " " [template] | [value] " " [template] | [function-call] " " [template]
             [variable]       ::= "$" [valid-name]
             [value]          ::= "'" [text] "'" | '"' [text] '"'
             [function-call]  ::= [function-id] | [function-id] [parameter]
             [parameter]      ::= [variable] | [value]
            
             BNF parsed by dedicated blocks
             [function-id]    ::= [valid-name] | [valid-name] "." [valid-name]
             [valid-name]     ::= [valid-symbol] | [valid-symbol] [valid-name]
             [valid-symbol]   ::= [letter] | [digit] | "_"
             [letter]         ::= "a" | "b" ... | "z" | "A" | "B" ... | "Z"
             [digit]          ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
             </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.CodeTokenizer.Tokenize(System.String)">
            <summary>
            Tokenize a code block, without checking for syntax errors
            </summary>
            <param name="text">Text to parse</param>
            <returns>A list of blocks</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.TemplateEngine.TemplateTokenizer">
             <summary>
             Simple tokenizer used for default SK template language.
            
             BNF parsed by TemplateTokenizer:
             [template]       ::= "" | [block] | [block] [template]
             [block]          ::= [sk-block] | [text-block]
             [sk-block]       ::= "{{" [variable] "}}" | "{{" [value] "}}" | "{{" [function-call] "}}"
             [text-block]     ::= [any-char] | [any-char] [text-block]
             [any-char]       ::= any char
            
             BNF parsed by CodeTokenizer:
             [template]       ::= "" | [variable] " " [template] | [value] " " [template] | [function-call] " " [template]
             [variable]       ::= "$" [valid-name]
             [value]          ::= "'" [text] "'" | '"' [text] '"'
             [function-call]  ::= [function-id] | [function-id] [parameter]
             [parameter]      ::= [variable] | [value]
            
             BNF parsed by dedicated blocks
             [function-id]    ::= [valid-name] | [valid-name] "." [valid-name]
             [valid-name]     ::= [valid-symbol] | [valid-symbol] [valid-name]
             [valid-symbol]   ::= [letter] | [digit] | "_"
             [letter]         ::= "a" | "b" ... | "z" | "A" | "B" ... | "Z"
             [digit]          ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
             </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.TemplateTokenizer.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
             <summary>
             Simple tokenizer used for default SK template language.
            
             BNF parsed by TemplateTokenizer:
             [template]       ::= "" | [block] | [block] [template]
             [block]          ::= [sk-block] | [text-block]
             [sk-block]       ::= "{{" [variable] "}}" | "{{" [value] "}}" | "{{" [function-call] "}}"
             [text-block]     ::= [any-char] | [any-char] [text-block]
             [any-char]       ::= any char
            
             BNF parsed by CodeTokenizer:
             [template]       ::= "" | [variable] " " [template] | [value] " " [template] | [function-call] " " [template]
             [variable]       ::= "$" [valid-name]
             [value]          ::= "'" [text] "'" | '"' [text] '"'
             [function-call]  ::= [function-id] | [function-id] [parameter]
             [parameter]      ::= [variable] | [value]
            
             BNF parsed by dedicated blocks
             [function-id]    ::= [valid-name] | [valid-name] "." [valid-name]
             [valid-name]     ::= [valid-symbol] | [valid-symbol] [valid-name]
             [valid-symbol]   ::= [letter] | [digit] | "_"
             [letter]         ::= "a" | "b" ... | "z" | "A" | "B" ... | "Z"
             [digit]          ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
             </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.TemplateEngine.TemplateTokenizer.Tokenize(System.String)">
            <summary>
            Extract blocks from the given text
            </summary>
            <param name="text">Text to parse</param>
            <returns>List of blocks found in the text</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.TextChunker">
            <summary>
            Split text in chunks, attempting to leave meaning intact.
            For plain text, split looking at new lines first, then periods, and so on.
            For markdown, split looking at punctuation first, and so on.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.TextChunker.StringListWithTokenCount">
            <summary>
            Represents a list of strings with token count.
            Used to reduce the number of calls to the tokenizer.
            </summary>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.TextChunker.StringListWithTokenCount.#ctor(Microsoft.SemanticKernel.Text.TextChunker.TokenCounter)">
            <summary>
            Represents a list of strings with token count.
            Used to reduce the number of calls to the tokenizer.
            </summary>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.TextChunker.TokenCounter">
            <summary>
            Delegate for counting tokens in a string.
            </summary>
            <param name="input">The input string to count tokens in.</param>
            <returns>The number of tokens in the input string.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.TextChunker.SplitPlainTextLines(System.String,System.Int32,Microsoft.SemanticKernel.Text.TextChunker.TokenCounter)">
            <summary>
            Split plain text into lines.
            </summary>
            <param name="text">Text to split</param>
            <param name="maxTokensPerLine">Maximum number of tokens per line.</param>
            <param name="tokenCounter">Function to count tokens in a string. If not supplied, the default counter will be used.</param>
            <returns>List of lines.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.TextChunker.SplitMarkDownLines(System.String,System.Int32,Microsoft.SemanticKernel.Text.TextChunker.TokenCounter)">
            <summary>
            Split markdown text into lines.
            </summary>
            <param name="text">Text to split</param>
            <param name="maxTokensPerLine">Maximum number of tokens per line.</param>
            <param name="tokenCounter">Function to count tokens in a string. If not supplied, the default counter will be used.</param>
            <returns>List of lines.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.TextChunker.SplitPlainTextParagraphs(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.String,Microsoft.SemanticKernel.Text.TextChunker.TokenCounter)">
            <summary>
            Split plain text into paragraphs.
            </summary>
            <param name="lines">Lines of text.</param>
            <param name="maxTokensPerParagraph">Maximum number of tokens per paragraph.</param>
            <param name="overlapTokens">Number of tokens to overlap between paragraphs.</param>
            <param name="chunkHeader">Text to be prepended to each individual chunk.</param>
            <param name="tokenCounter">Function to count tokens in a string. If not supplied, the default counter will be used.</param>
            <returns>List of paragraphs.</returns>
        </member>
        <member name="M:Microsoft.SemanticKernel.Text.TextChunker.SplitMarkdownParagraphs(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Int32,System.String,Microsoft.SemanticKernel.Text.TextChunker.TokenCounter)">
            <summary>
            Split markdown text into paragraphs.
            </summary>
            <param name="lines">Lines of text.</param>
            <param name="maxTokensPerParagraph">Maximum number of tokens per paragraph.</param>
            <param name="overlapTokens">Number of tokens to overlap between paragraphs.</param>
            <param name="chunkHeader">Text to be prepended to each individual chunk.</param>
            <param name="tokenCounter">Function to count tokens in a string. If not supplied, the default counter will be used.</param>
            <returns>List of paragraphs.</returns>
        </member>
        <member name="T:Microsoft.SemanticKernel.Text.JsonOptionsCache">
            <summary>Caches common configurations of <see cref="T:System.Text.Json.JsonSerializerOptions"/>.</summary>\
            <remarks>
            All of the instances include a converter for <see cref="T:System.ReadOnlyMemory`1"/>.
            Once the System.Text.Json package is upgraded to 8.0+, this will no longer be
            necessary and the actual default can be used.
            </remarks>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.Default">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for reading and writing JSON using the default settings.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.WriteIndented">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for writing JSON with indentation.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.ReadPermissive">
            <summary>
            Cached <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance for reading JSON in a permissive way,
            including support for trailing commas, case-insensitive property names, and comments.
            </summary>
        </member>
        <member name="P:Microsoft.SemanticKernel.Text.JsonOptionsCache.ChatHistory">
            <summary>
            Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> configured for serializing chat history data.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AnyLanguageWordRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AnyLanguageWordRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the InvalidNameCharsRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.InvalidNameCharsRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidContentRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ValidContentRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ValidContentRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidContentRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidContentRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidContentRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidContentRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidContentRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidContentRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidContentRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidNameRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ValidNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ValidNameRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidNameRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidNameRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidNameRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ValidNameRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidNameRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidNameRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ValidNameRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyLetter(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [\p{L}].</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptLetters">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@[\\]^_`{|}~\u007f".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiWordChars">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_40FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in ".0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
